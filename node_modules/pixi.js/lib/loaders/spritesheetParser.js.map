{"version":3,"sources":["../../src/loaders/spritesheetParser.js"],"names":["spritesheetParser","resource","next","resourcePath","imageResourceName","name","data","type","TYPE","JSON","frames","resources","loadOptions","crossOrigin","loadType","LOAD_TYPE","IMAGE","metadata","imageMetadata","parentResource","isDataUrl","meta","image","dirname","url","replace","baseUrl","add","onImageLoad","res","spritesheet","texture","baseTexture","parse","textures"],"mappings":";;;;kBAIe,YACf;AACI,WAAO,SAASA,iBAAT,CAA2BC,QAA3B,EAAqCC,IAArC,EACP;AACI,YAAIC,qBAAJ;AACA,YAAMC,oBAAuBH,SAASI,IAAhC,WAAN;;AAEA;AACA,YAAI,CAACJ,SAASK,IAAV,IACGL,SAASM,IAAT,KAAkB,yBAASC,IAAT,CAAcC,IADnC,IAEG,CAACR,SAASK,IAAT,CAAcI,MAFlB,IAGG,KAAKC,SAAL,CAAeP,iBAAf,CAHP,EAKA;AACIF;;AAEA;AACH;;AAED,YAAMU,cAAc;AAChBC,yBAAaZ,SAASY,WADN;AAEhBC,sBAAU,yBAASC,SAAT,CAAmBC,KAFb;AAGhBC,sBAAUhB,SAASgB,QAAT,CAAkBC,aAHZ;AAIhBC,4BAAgBlB;AAJA,SAApB;;AAOA;AACA,YAAIA,SAASmB,SAAb,EACA;AACIjB,2BAAeF,SAASK,IAAT,CAAce,IAAd,CAAmBC,KAAlC;AACH,SAHD,MAKA;AACInB,2BAAkB,eAAKoB,OAAL,CAAatB,SAASuB,GAAT,CAAaC,OAAb,CAAqB,KAAKC,OAA1B,EAAmC,EAAnC,CAAb,CAAlB,SAA0EzB,SAASK,IAAT,CAAce,IAAd,CAAmBC,KAA7F;AACH;;AAED;AACA,aAAKK,GAAL,CAASvB,iBAAT,EAA4BD,YAA5B,EAA0CS,WAA1C,EAAuD,SAASgB,WAAT,CAAqBC,GAArB,EACvD;AACI,gBAAMC,cAAc,sBAChBD,IAAIE,OAAJ,CAAYC,WADI,EAEhB/B,SAASK,IAFO,EAGhBL,SAASuB,GAHO,CAApB;;AAMAM,wBAAYG,KAAZ,CAAkB,YAClB;AACIhC,yBAAS6B,WAAT,GAAuBA,WAAvB;AACA7B,yBAASiC,QAAT,GAAoBJ,YAAYI,QAAhC;AACAhC;AACH,aALD;AAMH,SAdD;AAeH,KAlDD;AAmDH,C;;AAzDD;;AACA;;;;AACA","file":"spritesheetParser.js","sourcesContent":["import { Resource } from 'resource-loader';\nimport path from 'path';\nimport { Spritesheet } from '../core';\n\nexport default function ()\n{\n    return function spritesheetParser(resource, next)\n    {\n        let resourcePath;\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== Resource.TYPE.JSON\n            || !resource.data.frames\n            || this.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            loadType: Resource.LOAD_TYPE.IMAGE,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl)\n        {\n            resourcePath = resource.data.meta.image;\n        }\n        else\n        {\n            resourcePath = `${path.dirname(resource.url.replace(this.baseUrl, ''))}/${resource.data.meta.image}`;\n        }\n\n        // load the image for this sheet\n        this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res)\n        {\n            const spritesheet = new Spritesheet(\n                res.texture.baseTexture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    };\n}\n"]}