{"version":3,"sources":["../../src/interaction/interactiveTarget.js"],"names":["interactive","interactiveChildren","hitArea","buttonMode","cursor","value","trackedPointers","_trackedPointers","undefined"],"mappings":";;;AAAA;;;;;;;;;;;;;;;kBAee;AACX;;;;;AAKAA,eAAa,KANF;;AAQX;;;;;;AAMAC,uBAAqB,IAdV;;AAgBX;;;;;;AAMAC,WAAS,IAtBE;;AAwBX;;;;;;;AAOA,MAAIC,UAAJ,GACA;AACI,WAAO,KAAKC,MAAL,KAAgB,SAAvB;AACH,GAlCU;AAmCX,MAAID,UAAJ,CAAeE,KAAf,EACA;AACI,QAAIA,KAAJ,EACA;AACI,WAAKD,MAAL,GAAc,SAAd;AACH,KAHD,MAIK,IAAI,KAAKA,MAAL,KAAgB,SAApB,EACL;AACI,WAAKA,MAAL,GAAc,IAAd;AACH;AACJ,GA7CU;;AA+CX;;;;;;;;AAQAA,UAAQ,IAvDG;;AAyDX;;;;;;;AAOA,MAAIE,eAAJ,GACA;AACI,QAAI,KAAKC,gBAAL,KAA0BC,SAA9B,EAAyC,KAAKD,gBAAL,GAAwB,EAAxB;;AAEzC,WAAO,KAAKA,gBAAZ;AACH,GArEU;;AAuEX;;;;;AAKAA,oBAAkBC;AA5EP,C","file":"interactiveTarget.js","sourcesContent":["/**\n * Default property values of interactive objects\n * Used by {@link PIXI.interaction.InteractionManager} to automatically give all DisplayObjects these properties\n *\n * @mixin\n * @name interactiveTarget\n * @memberof PIXI.interaction\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          core.DisplayObject.prototype,\n *          PIXI.interaction.interactiveTarget\n *      );\n */\nexport default {\n    /**\n     * Determines if the displayObject be clicked/touched\n     *\n     * @inner {boolean}\n     */\n    interactive: false,\n\n    /**\n     * Determines if the children to the displayObject can be clicked/touched\n     * Setting this to false allows pixi to bypass a recursive hitTest function\n     *\n     * @inner {boolean}\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n     *\n     * @inner {PIXI.Rectangle|PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.RoundedRectangle}\n     */\n    hitArea: null,\n\n    /**\n     * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n     * Setting this changes the 'cursor' property to `'pointer'`.\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.interactiveTarget#\n     */\n    get buttonMode()\n    {\n        return this.cursor === 'pointer';\n    },\n    set buttonMode(value)\n    {\n        if (value)\n        {\n            this.cursor = 'pointer';\n        }\n        else if (this.cursor === 'pointer')\n        {\n            this.cursor = null;\n        }\n    },\n\n    /**\n     * This defines what cursor mode is used when the mouse cursor\n     * is hovered over the displayObject.\n     *\n     * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n     *\n     * @inner {string}\n     */\n    cursor: null,\n\n    /**\n     * Internal set of all active pointers, by identifier\n     *\n     * @member {Map<number, InteractionTrackingData>}\n     * @memberof PIXI.interaction.interactiveTarget#\n     * @private\n     */\n    get trackedPointers()\n    {\n        if (this._trackedPointers === undefined) this._trackedPointers = {};\n\n        return this._trackedPointers;\n    },\n\n    /**\n     * Map of all tracked pointers, by identifier. Use trackedPointers to access.\n     *\n     * @private {Map<number, InteractionTrackingData>}\n     */\n    _trackedPointers: undefined,\n};\n"]}