{"version":3,"sources":["../../src/interaction/InteractionManager.js"],"names":["core","utils","mixins","delayMixin","DisplayObject","prototype","MOUSE_POINTER_ID","InteractionManager","renderer","options","autoPreventDefault","undefined","interactionFrequency","mouse","identifier","global","set","activeInteractionData","interactionDataPool","eventData","interactionDOMElement","moveWhenInside","eventsAdded","mouseOverRenderer","supportsTouchEvents","window","supportsPointerEvents","PointerEvent","onPointerUp","bind","processPointerUp","onPointerCancel","processPointerCancel","onPointerDown","processPointerDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","cursorStyles","default","pointer","currentCursorMode","cursor","_tempPoint","Point","resolution","setTargetElement","view","element","removeEvents","addEvents","ticker","shared","add","update","navigator","msPointerEnabled","style","document","addEventListener","remove","removeEventListener","deltaTime","_deltaTime","didMove","k","hasOwnProperty","interactionData","originalEvent","pointerType","interactionEvent","configureInteractionEventForDOMEvent","processInteractive","_lastObjectRendered","setCursorMode","mode","Object","assign","dispatchEvent","displayObject","eventString","stopped","currentTarget","type","emit","mapPositionToPoint","point","x","y","rect","parentElement","width","height","getBoundingClientRect","resolutionMultiplier","isCocoonJS","left","top","func","hitTest","interactive","visible","data","hit","interactiveParent","hitArea","_mask","containsPoint","interactiveChildren","children","i","length","child","childHit","parent","target","worldTransform","applyInverse","contains","events","normalizeToPointerData","isNormalized","preventDefault","eventLen","event","getInteractionDataForPointerId","isRightButton","button","which","e","id","trackedPointers","rightDown","leftDown","onPointerComplete","cancelled","releaseInteractionDataForPointerId","pointerId","trackingData","isTouch","isMouse","indexOf","flags","FLAGS","test","RIGHT_DOWN","LEFT_DOWN","isDown","over","none","pop","push","pointerEvent","clientX","clientY","globalX","globalY","_reset","normalizedEvents","TouchEvent","li","changedTouches","touch","touches","buttons","isPrimary","radiusX","radiusY","tiltX","tiltY","pressure","force","rotation","rotationAngle","layerX","offsetX","layerY","offsetY","MouseEvent","destroy","removeAllListeners","WebGLRenderer","registerPlugin","CanvasRenderer"],"mappings":";;;;;;AAAA;;IAAYA,I;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;AACAA,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,UAAlB,CACIH,KAAKI,aAAL,CAAmBC,SADvB;;AAKA,IAAMC,mBAAmB,OAAzB;;AAEA;;;;;;;;;;;;IAWqBC,kB;;;AAEjB;;;;;;AAMA,gCAAYC,QAAZ,EAAsBC,OAAtB,EACA;AAAA;;AAAA,qDACI,wBADJ;;AAGIA,kBAAUA,WAAW,EAArB;;AAEA;;;;;AAKA,cAAKD,QAAL,GAAgBA,QAAhB;;AAEA;;;;;;;;;AASA,cAAKE,kBAAL,GAA0BD,QAAQC,kBAAR,KAA+BC,SAA/B,GAA2CF,QAAQC,kBAAnD,GAAwE,IAAlG;;AAEA;;;;;;AAMA,cAAKE,oBAAL,GAA4BH,QAAQG,oBAAR,IAAgC,EAA5D;;AAEA;;;;;AAKA,cAAKC,KAAL,GAAa,+BAAb;AACA,cAAKA,KAAL,CAAWC,UAAX,GAAwBR,gBAAxB;;AAEA;AACA;AACA,cAAKO,KAAL,CAAWE,MAAX,CAAkBC,GAAlB,CAAsB,CAAC,MAAvB;;AAEA;;;;;;AAMA,cAAKC,qBAAL,GAA6B,EAA7B;AACA,cAAKA,qBAAL,CAA2BX,gBAA3B,IAA+C,MAAKO,KAApD;;AAEA;;;;;;AAMA,cAAKK,mBAAL,GAA2B,EAA3B;;AAEA;;;;;AAKA,cAAKC,SAAL,GAAiB,gCAAjB;;AAEA;;;;;;AAMA,cAAKC,qBAAL,GAA6B,IAA7B;;AAEA;;;;;;;;;;;AAWA,cAAKC,cAAL,GAAsB,KAAtB;;AAEA;;;;;;AAMA,cAAKC,WAAL,GAAmB,KAAnB;;AAEA;;;;;;AAMA,cAAKC,iBAAL,GAAyB,KAAzB;;AAEA;;;;;;;AAOA,cAAKC,mBAAL,GAA2B,kBAAkBC,MAA7C;;AAEA;;;;;;;AAOA,cAAKC,qBAAL,GAA6B,CAAC,CAACD,OAAOE,YAAtC;;AAEA;;AAEA;;;;AAIA,cAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,cAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;;AAEA;;;;AAIA,cAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,OAAvB;AACA,cAAKG,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BH,IAA1B,OAA5B;;AAEA;;;;AAIA,cAAKI,aAAL,GAAqB,MAAKA,aAAL,CAAmBJ,IAAnB,OAArB;AACA,cAAKK,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBL,IAAxB,OAA1B;;AAEA;;;;AAIA,cAAKM,aAAL,GAAqB,MAAKA,aAAL,CAAmBN,IAAnB,OAArB;AACA,cAAKO,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBP,IAAxB,OAA1B;;AAEA;;;;AAIA,cAAKQ,YAAL,GAAoB,MAAKA,YAAL,CAAkBR,IAAlB,OAApB;AACA,cAAKS,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BT,IAA3B,OAA7B;;AAEA;;;;AAIA,cAAKU,aAAL,GAAqB,MAAKA,aAAL,CAAmBV,IAAnB,OAArB;;AAEA;;;;;;;AAOA,cAAKW,YAAL,GAAoB;AAChBC,qBAAS,SADO;AAEhBC,qBAAS;AAFO,SAApB;;AAKA;;;;;;AAMA,cAAKC,iBAAL,GAAyB,IAAzB;;AAEA;;;;;;AAMA,cAAKC,MAAL,GAAc,IAAd;;AAEA;;;;;;AAMA,cAAKC,UAAL,GAAkB,IAAI7C,KAAK8C,KAAT,EAAlB;;AAEA;;;;;;AAMA,cAAKC,UAAL,GAAkB,CAAlB;;AAEA,cAAKC,gBAAL,CAAsB,MAAKxC,QAAL,CAAcyC,IAApC,EAA0C,MAAKzC,QAAL,CAAcuC,UAAxD;;AAEA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;AA7ZJ;AAoaC;;AAED;;;;;;;;;;;iCASAC,gB,6BAAiBE,O,EACjB;AAAA,YAD0BH,UAC1B,uEADuC,CACvC;;AACI,aAAKI,YAAL;;AAEA,aAAK/B,qBAAL,GAA6B8B,OAA7B;;AAEA,aAAKH,UAAL,GAAkBA,UAAlB;;AAEA,aAAKK,SAAL;AACH,K;;AAED;;;;;;;iCAKAA,S,wBACA;AACI,YAAI,CAAC,KAAKhC,qBAAV,EACA;AACI;AACH;;AAEDpB,aAAKqD,MAAL,CAAYC,MAAZ,CAAmBC,GAAnB,CAAuB,KAAKC,MAA5B,EAAoC,IAApC;;AAEA,YAAI/B,OAAOgC,SAAP,CAAiBC,gBAArB,EACA;AACI,iBAAKtC,qBAAL,CAA2BuC,KAA3B,CAAiC,qBAAjC,IAA0D,MAA1D;AACA,iBAAKvC,qBAAL,CAA2BuC,KAA3B,CAAiC,kBAAjC,IAAuD,MAAvD;AACH,SAJD,MAKK,IAAI,KAAKjC,qBAAT,EACL;AACI,iBAAKN,qBAAL,CAA2BuC,KAA3B,CAAiC,cAAjC,IAAmD,MAAnD;AACH;;AAED;;;;AAIA,YAAI,KAAKjC,qBAAT,EACA;AACID,mBAAOmC,QAAP,CAAgBC,gBAAhB,CAAiC,aAAjC,EAAgD,KAAK1B,aAArD,EAAoE,IAApE;AACA,iBAAKf,qBAAL,CAA2ByC,gBAA3B,CAA4C,aAA5C,EAA2D,KAAK5B,aAAhE,EAA+E,IAA/E;AACA;AACA;AACA;AACA,iBAAKb,qBAAL,CAA2ByC,gBAA3B,CAA4C,cAA5C,EAA4D,KAAKxB,YAAjE,EAA+E,IAA/E;AACA,iBAAKjB,qBAAL,CAA2ByC,gBAA3B,CAA4C,aAA5C,EAA2D,KAAKtB,aAAhE,EAA+E,IAA/E;AACAd,mBAAOoC,gBAAP,CAAwB,eAAxB,EAAyC,KAAK9B,eAA9C,EAA+D,IAA/D;AACAN,mBAAOoC,gBAAP,CAAwB,WAAxB,EAAqC,KAAKjC,WAA1C,EAAuD,IAAvD;AACH,SAXD,MAcA;AACIH,mBAAOmC,QAAP,CAAgBC,gBAAhB,CAAiC,WAAjC,EAA8C,KAAK1B,aAAnD,EAAkE,IAAlE;AACA,iBAAKf,qBAAL,CAA2ByC,gBAA3B,CAA4C,WAA5C,EAAyD,KAAK5B,aAA9D,EAA6E,IAA7E;AACA,iBAAKb,qBAAL,CAA2ByC,gBAA3B,CAA4C,UAA5C,EAAwD,KAAKxB,YAA7D,EAA2E,IAA3E;AACA,iBAAKjB,qBAAL,CAA2ByC,gBAA3B,CAA4C,WAA5C,EAAyD,KAAKtB,aAA9D,EAA6E,IAA7E;AACAd,mBAAOoC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKjC,WAAxC,EAAqD,IAArD;;AAEA,gBAAI,KAAKJ,mBAAT,EACA;AACI,qBAAKJ,qBAAL,CAA2ByC,gBAA3B,CAA4C,YAA5C,EAA0D,KAAK5B,aAA/D,EAA8E,IAA9E;AACA,qBAAKb,qBAAL,CAA2ByC,gBAA3B,CAA4C,aAA5C,EAA2D,KAAK9B,eAAhE,EAAiF,IAAjF;AACA,qBAAKX,qBAAL,CAA2ByC,gBAA3B,CAA4C,UAA5C,EAAwD,KAAKjC,WAA7D,EAA0E,IAA1E;AACA,qBAAKR,qBAAL,CAA2ByC,gBAA3B,CAA4C,WAA5C,EAAyD,KAAK1B,aAA9D,EAA6E,IAA7E;AACH;AACJ;;AAED,aAAKb,WAAL,GAAmB,IAAnB;AACH,K;;AAED;;;;;;;iCAKA6B,Y,2BACA;AACI,YAAI,CAAC,KAAK/B,qBAAV,EACA;AACI;AACH;;AAEDpB,aAAKqD,MAAL,CAAYC,MAAZ,CAAmBQ,MAAnB,CAA0B,KAAKN,MAA/B,EAAuC,IAAvC;;AAEA,YAAI/B,OAAOgC,SAAP,CAAiBC,gBAArB,EACA;AACI,iBAAKtC,qBAAL,CAA2BuC,KAA3B,CAAiC,qBAAjC,IAA0D,EAA1D;AACA,iBAAKvC,qBAAL,CAA2BuC,KAA3B,CAAiC,kBAAjC,IAAuD,EAAvD;AACH,SAJD,MAKK,IAAI,KAAKjC,qBAAT,EACL;AACI,iBAAKN,qBAAL,CAA2BuC,KAA3B,CAAiC,cAAjC,IAAmD,EAAnD;AACH;;AAED,YAAI,KAAKjC,qBAAT,EACA;AACID,mBAAOmC,QAAP,CAAgBG,mBAAhB,CAAoC,aAApC,EAAmD,KAAK5B,aAAxD,EAAuE,IAAvE;AACA,iBAAKf,qBAAL,CAA2B2C,mBAA3B,CAA+C,aAA/C,EAA8D,KAAK9B,aAAnE,EAAkF,IAAlF;AACA,iBAAKb,qBAAL,CAA2B2C,mBAA3B,CAA+C,cAA/C,EAA+D,KAAK1B,YAApE,EAAkF,IAAlF;AACA,iBAAKjB,qBAAL,CAA2B2C,mBAA3B,CAA+C,aAA/C,EAA8D,KAAKxB,aAAnE,EAAkF,IAAlF;AACAd,mBAAOsC,mBAAP,CAA2B,eAA3B,EAA4C,KAAKhC,eAAjD,EAAkE,IAAlE;AACAN,mBAAOsC,mBAAP,CAA2B,WAA3B,EAAwC,KAAKnC,WAA7C,EAA0D,IAA1D;AACH,SARD,MAUA;AACIH,mBAAOmC,QAAP,CAAgBG,mBAAhB,CAAoC,WAApC,EAAiD,KAAK5B,aAAtD,EAAqE,IAArE;AACA,iBAAKf,qBAAL,CAA2B2C,mBAA3B,CAA+C,WAA/C,EAA4D,KAAK9B,aAAjE,EAAgF,IAAhF;AACA,iBAAKb,qBAAL,CAA2B2C,mBAA3B,CAA+C,UAA/C,EAA2D,KAAK1B,YAAhE,EAA8E,IAA9E;AACA,iBAAKjB,qBAAL,CAA2B2C,mBAA3B,CAA+C,WAA/C,EAA4D,KAAKxB,aAAjE,EAAgF,IAAhF;AACAd,mBAAOsC,mBAAP,CAA2B,SAA3B,EAAsC,KAAKnC,WAA3C,EAAwD,IAAxD;;AAEA,gBAAI,KAAKJ,mBAAT,EACA;AACI,qBAAKJ,qBAAL,CAA2B2C,mBAA3B,CAA+C,YAA/C,EAA6D,KAAK9B,aAAlE,EAAiF,IAAjF;AACA,qBAAKb,qBAAL,CAA2B2C,mBAA3B,CAA+C,aAA/C,EAA8D,KAAKhC,eAAnE,EAAoF,IAApF;AACA,qBAAKX,qBAAL,CAA2B2C,mBAA3B,CAA+C,UAA/C,EAA2D,KAAKnC,WAAhE,EAA6E,IAA7E;AACA,qBAAKR,qBAAL,CAA2B2C,mBAA3B,CAA+C,WAA/C,EAA4D,KAAK5B,aAAjE,EAAgF,IAAhF;AACH;AACJ;;AAED,aAAKf,qBAAL,GAA6B,IAA7B;;AAEA,aAAKE,WAAL,GAAmB,KAAnB;AACH,K;;AAED;;;;;;;;iCAMAkC,M,mBAAOQ,S,EACP;AACI,aAAKC,UAAL,IAAmBD,SAAnB;;AAEA,YAAI,KAAKC,UAAL,GAAkB,KAAKrD,oBAA3B,EACA;AACI;AACH;;AAED,aAAKqD,UAAL,GAAkB,CAAlB;;AAEA,YAAI,CAAC,KAAK7C,qBAAV,EACA;AACI;AACH;;AAED;AACA,YAAI,KAAK8C,OAAT,EACA;AACI,iBAAKA,OAAL,GAAe,KAAf;;AAEA;AACH;;AAED,aAAKtB,MAAL,GAAc,IAAd;;AAEA;AACA;AACA;AACA,aAAK,IAAMuB,CAAX,IAAgB,KAAKlD,qBAArB,EACA;AACI;AACA,gBAAI,KAAKA,qBAAL,CAA2BmD,cAA3B,CAA0CD,CAA1C,CAAJ,EACA;AACI,oBAAME,kBAAkB,KAAKpD,qBAAL,CAA2BkD,CAA3B,CAAxB;;AAEA,oBAAIE,gBAAgBC,aAAhB,IAAiCD,gBAAgBE,WAAhB,KAAgC,OAArE,EACA;AACI,wBAAMC,mBAAmB,KAAKC,oCAAL,CACrB,KAAKtD,SADgB,EAErBkD,gBAAgBC,aAFK,EAGrBD,eAHqB,CAAzB;;AAMA,yBAAKK,kBAAL,CACIF,gBADJ,EAEI,KAAKhE,QAAL,CAAcmE,mBAFlB,EAGI,KAAKrC,qBAHT,EAII,IAJJ;AAMH;AACJ;AACJ;;AAED,aAAKsC,aAAL,CAAmB,KAAKhC,MAAxB;;AAEA;AACH,K;;AAED;;;;;;;iCAKAgC,a,0BAAcC,I,EACd;AACIA,eAAOA,QAAQ,SAAf;AACA;AACA,YAAI,KAAKlC,iBAAL,KAA2BkC,IAA/B,EACA;AACI;AACH;AACD,aAAKlC,iBAAL,GAAyBkC,IAAzB;AACA,YAAMlB,QAAQ,KAAKnB,YAAL,CAAkBqC,IAAlB,CAAd;;AAEA;AACA,YAAIlB,KAAJ,EACA;AACI,2BAAeA,KAAf,yCAAeA,KAAf;AAEI,qBAAK,QAAL;AACI;AACA,yBAAKvC,qBAAL,CAA2BuC,KAA3B,CAAiCf,MAAjC,GAA0Ce,KAA1C;AACA;AACJ,qBAAK,UAAL;AACI;AACAA,0BAAMkB,IAAN;AACA;AACJ,qBAAK,QAAL;AACI;AACA;AACAC,2BAAOC,MAAP,CAAc,KAAK3D,qBAAL,CAA2BuC,KAAzC,EAAgDA,KAAhD;AACA;AAdR;AAgBH;AACJ,K;;AAED;;;;;;;;;;iCAQAqB,a,0BAAcC,a,EAAeC,W,EAAa/D,S,EAC1C;AACI,YAAI,CAACA,UAAUgE,OAAf,EACA;AACIhE,sBAAUiE,aAAV,GAA0BH,aAA1B;AACA9D,sBAAUkE,IAAV,GAAiBH,WAAjB;;AAEAD,0BAAcK,IAAd,CAAmBJ,WAAnB,EAAgC/D,SAAhC;;AAEA,gBAAI8D,cAAcC,WAAd,CAAJ,EACA;AACID,8BAAcC,WAAd,EAA2B/D,SAA3B;AACH;AACJ;AACJ,K;;AAED;;;;;;;;;;;iCASAoE,kB,+BAAmBC,K,EAAOC,C,EAAGC,C,EAC7B;AACI,YAAIC,aAAJ;;AAEA;AACA,YAAI,CAAC,KAAKvE,qBAAL,CAA2BwE,aAAhC,EACA;AACID,mBAAO,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAcG,OAAO,CAArB,EAAwBC,QAAQ,CAAhC,EAAP;AACH,SAHD,MAKA;AACIH,mBAAO,KAAKvE,qBAAL,CAA2B2E,qBAA3B,EAAP;AACH;;AAED,YAAMC,uBAAuBvC,UAAUwC,UAAV,GAAuB,KAAKlD,UAA5B,GAA0C,MAAM,KAAKA,UAAlF;;AAEAyC,cAAMC,CAAN,GAAW,CAACA,IAAIE,KAAKO,IAAV,KAAmB,KAAK9E,qBAAL,CAA2ByE,KAA3B,GAAmCF,KAAKE,KAA3D,CAAD,GAAsEG,oBAAhF;AACAR,cAAME,CAAN,GAAW,CAACA,IAAIC,KAAKQ,GAAV,KAAkB,KAAK/E,qBAAL,CAA2B0E,MAA3B,GAAoCH,KAAKG,MAA3D,CAAD,GAAuEE,oBAAjF;AACH,K;;AAED;;;;;;;;;;;;;;;;;;iCAgBAtB,kB,+BAAmBF,gB,EAAkBS,a,EAAemB,I,EAAMC,O,EAASC,W,EACnE;AACI,YAAI,CAACrB,aAAD,IAAkB,CAACA,cAAcsB,OAArC,EACA;AACI,mBAAO,KAAP;AACH;;AAED,YAAMf,QAAQhB,iBAAiBgC,IAAjB,CAAsBzF,MAApC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAuF,sBAAcrB,cAAcqB,WAAd,IAA6BA,WAA3C;;AAEA,YAAIG,MAAM,KAAV;AACA,YAAIC,oBAAoBJ,WAAxB;;AAEA;AACA,YAAIrB,cAAc0B,OAAlB,EACA;AACID,gCAAoB,KAApB;AACH;AACD;AAJA,aAKK,IAAIL,WAAWpB,cAAc2B,KAA7B,EACL;AACI,oBAAI,CAAC3B,cAAc2B,KAAd,CAAoBC,aAApB,CAAkCrB,KAAlC,CAAL,EACA;AACIa,8BAAU,KAAV;AACH;AACJ;;AAED;AACA;AACA;AACA,YAAIpB,cAAc6B,mBAAd,IAAqC7B,cAAc8B,QAAvD,EACA;AACI,gBAAMA,WAAW9B,cAAc8B,QAA/B;;AAEA,iBAAK,IAAIC,IAAID,SAASE,MAAT,GAAkB,CAA/B,EAAkCD,KAAK,CAAvC,EAA0CA,GAA1C,EACA;AACI,oBAAME,QAAQH,SAASC,CAAT,CAAd;;AAEA;AACA,oBAAMG,WAAW,KAAKzC,kBAAL,CAAwBF,gBAAxB,EAA0C0C,KAA1C,EAAiDd,IAAjD,EAAuDC,OAAvD,EAAgEK,iBAAhE,CAAjB;;AAEA,oBAAIS,QAAJ,EACA;AACI;AACA;AACA,wBAAI,CAACD,MAAME,MAAX,EACA;AACI;AACH;;AAED;AACA;AACAV,wCAAoB,KAApB;;AAEA;AACA;AACA;AACA;;AAEA,wBAAIS,QAAJ,EACA;AACI,4BAAI3C,iBAAiB6C,MAArB,EACA;AACIhB,sCAAU,KAAV;AACH;AACDI,8BAAM,IAAN;AACH;AACJ;AACJ;AACJ;;AAED;AACA,YAAIH,WAAJ,EACA;AACI;AACA;AACA;AACA;AACA,gBAAID,WAAW,CAAC7B,iBAAiB6C,MAAjC,EACA;AACI,oBAAIpC,cAAc0B,OAAlB,EACA;AACI1B,kCAAcqC,cAAd,CAA6BC,YAA7B,CAA0C/B,KAA1C,EAAiD,KAAK3C,UAAtD;AACA,wBAAIoC,cAAc0B,OAAd,CAAsBa,QAAtB,CAA+B,KAAK3E,UAAL,CAAgB4C,CAA/C,EAAkD,KAAK5C,UAAL,CAAgB6C,CAAlE,CAAJ,EACA;AACIe,8BAAM,IAAN;AACH;AACJ,iBAPD,MAQK,IAAIxB,cAAc4B,aAAlB,EACL;AACI,wBAAI5B,cAAc4B,aAAd,CAA4BrB,KAA5B,CAAJ,EACA;AACIiB,8BAAM,IAAN;AACH;AACJ;AACJ;;AAED,gBAAIxB,cAAcqB,WAAlB,EACA;AACI,oBAAIG,OAAO,CAACjC,iBAAiB6C,MAA7B,EACA;AACI7C,qCAAiB6C,MAAjB,GAA0BpC,aAA1B;AACH;;AAEDmB,qBAAK5B,gBAAL,EAAuBS,aAAvB,EAAsC,CAAC,CAACwB,GAAxC;AACH;AACJ;;AAED,eAAOA,GAAP;AACH,K;;AAED;;;;;;;;iCAMAxE,a,0BAAcqC,a,EACd;AACI,YAAMmD,SAAS,KAAKC,sBAAL,CAA4BpD,aAA5B,CAAf;;AAEA;;;;;;AAMA;;AAEA,YAAI,KAAK5D,kBAAL,IAA2B+G,OAAO,CAAP,EAAUE,YAAzC,EACA;AACIrD,0BAAcsD,cAAd;AACH;;AAED,YAAMC,WAAWJ,OAAOR,MAAxB;;AAEA,aAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIa,QAApB,EAA8Bb,GAA9B,EACA;AACI,gBAAMc,QAAQL,OAAOT,CAAP,CAAd;;AAEA,gBAAM3C,kBAAkB,KAAK0D,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,gBAAMtD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAKtD,SAA/C,EAA0D2G,KAA1D,EAAiEzD,eAAjE,CAAzB;;AAEAG,6BAAiBgC,IAAjB,CAAsBlC,aAAtB,GAAsCA,aAAtC;;AAEA,iBAAKI,kBAAL,CAAwBF,gBAAxB,EAA0C,KAAKhE,QAAL,CAAcmE,mBAAxD,EAA6E,KAAKzC,kBAAlF,EAAsG,IAAtG;;AAEA,iBAAKoD,IAAL,CAAU,aAAV,EAAyBd,gBAAzB;AACA,gBAAIsD,MAAMvD,WAAN,KAAsB,OAA1B,EACA;AACI,qBAAKe,IAAL,CAAU,YAAV,EAAwBd,gBAAxB;AACH,aAHD,MAIK,IAAIsD,MAAMvD,WAAN,KAAsB,OAA1B,EACL;AACI,oBAAMyD,gBAAgBF,MAAMG,MAAN,KAAiB,CAAjB,IAAsBH,MAAMI,KAAN,KAAgB,CAA5D;;AAEA,qBAAK5C,IAAL,CAAU0C,gBAAgB,WAAhB,GAA8B,WAAxC,EAAqD,KAAK7G,SAA1D;AACH;AACJ;AACJ,K;;AAED;;;;;;;;;;iCAQAe,kB,+BAAmBsC,gB,EAAkBS,a,EAAewB,G,EACpD;AACI,YAAM0B,IAAI3D,iBAAiBgC,IAAjB,CAAsBlC,aAAhC;;AAEA,YAAM8D,KAAK5D,iBAAiBgC,IAAjB,CAAsB1F,UAAjC;;AAEA,YAAI2F,GAAJ,EACA;AACI,gBAAI,CAACxB,cAAcoD,eAAd,CAA8BD,EAA9B,CAAL,EACA;AACInD,8BAAcoD,eAAd,CAA8BD,EAA9B,IAAoC,sCAA4BA,EAA5B,CAApC;AACH;AACD,iBAAKpD,aAAL,CAAmBC,aAAnB,EAAkC,aAAlC,EAAiDT,gBAAjD;;AAEA,gBAAI2D,EAAE9C,IAAF,KAAW,YAAX,IAA2B8C,EAAE5D,WAAF,KAAkB,OAAjD,EACA;AACI,qBAAKS,aAAL,CAAmBC,aAAnB,EAAkC,YAAlC,EAAgDT,gBAAhD;AACH,aAHD,MAIK,IAAI2D,EAAE9C,IAAF,KAAW,WAAX,IAA0B8C,EAAE5D,WAAF,KAAkB,OAAhD,EACL;AACI,oBAAMyD,gBAAgBG,EAAEF,MAAF,KAAa,CAAb,IAAkBE,EAAED,KAAF,KAAY,CAApD;;AAEA,oBAAIF,aAAJ,EACA;AACI/C,kCAAcoD,eAAd,CAA8BD,EAA9B,EAAkCE,SAAlC,GAA8C,IAA9C;AACH,iBAHD,MAKA;AACIrD,kCAAcoD,eAAd,CAA8BD,EAA9B,EAAkCG,QAAlC,GAA6C,IAA7C;AACH;;AAED,qBAAKvD,aAAL,CAAmBC,aAAnB,EAAkC+C,gBAAgB,WAAhB,GAA8B,WAAhE,EAA6ExD,gBAA7E;AACH;AACJ;AACJ,K;;AAED;;;;;;;;;;iCAQAgE,iB,8BAAkBlE,a,EAAemE,S,EAAWrC,I,EAC5C;AACI,YAAMqB,SAAS,KAAKC,sBAAL,CAA4BpD,aAA5B,CAAf;;AAEA,YAAMuD,WAAWJ,OAAOR,MAAxB;;AAEA,aAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIa,QAApB,EAA8Bb,GAA9B,EACA;AACI,gBAAMc,QAAQL,OAAOT,CAAP,CAAd;;AAEA,gBAAM3C,kBAAkB,KAAK0D,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,gBAAMtD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAKtD,SAA/C,EAA0D2G,KAA1D,EAAiEzD,eAAjE,CAAzB;;AAEAG,6BAAiBgC,IAAjB,CAAsBlC,aAAtB,GAAsCA,aAAtC;;AAEA,iBAAKI,kBAAL,CAAwBF,gBAAxB,EAA0C,KAAKhE,QAAL,CAAcmE,mBAAxD,EAA6EyB,IAA7E,EAAmF,IAAnF;;AAEA,iBAAKd,IAAL,CAAUmD,YAAY,eAAZ,GAA8B,WAAxC,EAAqDjE,gBAArD;;AAEA,gBAAIsD,MAAMvD,WAAN,KAAsB,OAA1B,EACA;AACI,oBAAMyD,gBAAgBF,MAAMG,MAAN,KAAiB,CAAjB,IAAsBH,MAAMI,KAAN,KAAgB,CAA5D;;AAEA,qBAAK5C,IAAL,CAAU0C,gBAAgB,SAAhB,GAA4B,SAAtC,EAAiDxD,gBAAjD;AACH,aALD,MAMK,IAAIsD,MAAMvD,WAAN,KAAsB,OAA1B,EACL;AACI,qBAAKe,IAAL,CAAUmD,YAAY,aAAZ,GAA4B,UAAtC,EAAkDjE,gBAAlD;AACA,qBAAKkE,kCAAL,CAAwCZ,MAAMa,SAA9C,EAAyDtE,eAAzD;AACH;AACJ;AACJ,K;;AAED;;;;;;;;iCAMAtC,e,4BAAgB+F,K,EAChB;AACI,aAAKU,iBAAL,CAAuBV,KAAvB,EAA8B,IAA9B,EAAoC,KAAK9F,oBAAzC;AACH,K;;AAED;;;;;;;;;iCAOAA,oB,iCAAqBwC,gB,EAAkBS,a,EACvC;AACI,YAAMkD,IAAI3D,iBAAiBgC,IAAjB,CAAsBlC,aAAhC;;AAEA,YAAM8D,KAAK5D,iBAAiBgC,IAAjB,CAAsB1F,UAAjC;;AAEA,YAAImE,cAAcoD,eAAd,CAA8BD,EAA9B,MAAsCzH,SAA1C,EACA;AACI,mBAAOsE,cAAcoD,eAAd,CAA8BD,EAA9B,CAAP;AACA,iBAAKpD,aAAL,CAAmBC,aAAnB,EAAkC,eAAlC,EAAmDT,gBAAnD;;AAEA,gBAAI2D,EAAE9C,IAAF,KAAW,aAAX,IAA4B8C,EAAE5D,WAAF,KAAkB,OAAlD,EACA;AACI,qBAAKS,aAAL,CAAmBC,aAAnB,EAAkC,aAAlC,EAAiDT,gBAAjD;AACH;AACJ;AACJ,K;;AAED;;;;;;;;iCAMA5C,W,wBAAYkG,K,EACZ;AACI,aAAKU,iBAAL,CAAuBV,KAAvB,EAA8B,KAA9B,EAAqC,KAAKhG,gBAA1C;AACH,K;;AAED;;;;;;;;;;iCAQAA,gB,6BAAiB0C,gB,EAAkBS,a,EAAewB,G,EAClD;AACI,YAAM0B,IAAI3D,iBAAiBgC,IAAjB,CAAsBlC,aAAhC;;AAEA,YAAM8D,KAAK5D,iBAAiBgC,IAAjB,CAAsB1F,UAAjC;;AAEA,YAAM8H,eAAe3D,cAAcoD,eAAd,CAA8BD,EAA9B,CAArB;;AAEA,YAAMS,UAAWV,EAAE9C,IAAF,KAAW,UAAX,IAAyB8C,EAAE5D,WAAF,KAAkB,OAA5D;;AAEA,YAAMuE,UAAWX,EAAE9C,IAAF,CAAO0D,OAAP,CAAe,OAAf,MAA4B,CAA5B,IAAiCZ,EAAE5D,WAAF,KAAkB,OAApE;;AAEA;AACA,YAAIuE,OAAJ,EACA;AACI,gBAAMd,gBAAgBG,EAAEF,MAAF,KAAa,CAAb,IAAkBE,EAAED,KAAF,KAAY,CAApD;;AAEA,gBAAMc,QAAQ,kCAAwBC,KAAtC;;AAEA,gBAAMC,OAAOlB,gBAAgBgB,MAAMG,UAAtB,GAAmCH,MAAMI,SAAtD;;AAEA,gBAAMC,SAAST,iBAAiBjI,SAAjB,IAA+BiI,aAAaI,KAAb,GAAqBE,IAAnE;;AAEA,gBAAIzC,GAAJ,EACA;AACI,qBAAKzB,aAAL,CAAmBC,aAAnB,EAAkC+C,gBAAgB,SAAhB,GAA4B,SAA9D,EAAyExD,gBAAzE;;AAEA,oBAAI6E,MAAJ,EACA;AACI,yBAAKrE,aAAL,CAAmBC,aAAnB,EAAkC+C,gBAAgB,YAAhB,GAA+B,OAAjE,EAA0ExD,gBAA1E;AACH;AACJ,aARD,MASK,IAAI6E,MAAJ,EACL;AACI,qBAAKrE,aAAL,CAAmBC,aAAnB,EAAkC+C,gBAAgB,gBAAhB,GAAmC,gBAArE,EAAuFxD,gBAAvF;AACH;AACD;AACA,gBAAIoE,YAAJ,EACA;AACI,oBAAIZ,aAAJ,EACA;AACIY,iCAAaN,SAAb,GAAyB,KAAzB;AACH,iBAHD,MAKA;AACIM,iCAAaL,QAAb,GAAwB,KAAxB;AACH;AACJ;AACJ;;AAED;AACA,YAAI9B,GAAJ,EACA;AACI,iBAAKzB,aAAL,CAAmBC,aAAnB,EAAkC,WAAlC,EAA+CT,gBAA/C;AACA,gBAAIqE,OAAJ,EAAa,KAAK7D,aAAL,CAAmBC,aAAnB,EAAkC,UAAlC,EAA8CT,gBAA9C;;AAEb,gBAAIoE,YAAJ,EACA;AACI,qBAAK5D,aAAL,CAAmBC,aAAnB,EAAkC,YAAlC,EAAgDT,gBAAhD;AACA,oBAAIqE,OAAJ,EACA;AACI,yBAAK7D,aAAL,CAAmBC,aAAnB,EAAkC,KAAlC,EAAyCT,gBAAzC;AACA;AACA;AACAoE,iCAAaU,IAAb,GAAoB,KAApB;AACH;AACJ;AACJ,SAhBD,MAiBK,IAAIV,YAAJ,EACL;AACI,iBAAK5D,aAAL,CAAmBC,aAAnB,EAAkC,kBAAlC,EAAsDT,gBAAtD;AACA,gBAAIqE,OAAJ,EAAa,KAAK7D,aAAL,CAAmBC,aAAnB,EAAkC,iBAAlC,EAAqDT,gBAArD;AAChB;AACD;AACA,YAAIoE,gBAAgBA,aAAaW,IAAjC,EACA;AACI,mBAAOtE,cAAcoD,eAAd,CAA8BD,EAA9B,CAAP;AACH;AACJ,K;;AAED;;;;;;;;iCAMAjG,a,0BAAcmC,a,EACd;AACI,YAAMmD,SAAS,KAAKC,sBAAL,CAA4BpD,aAA5B,CAAf;;AAEA,YAAImD,OAAO,CAAP,EAAUlD,WAAV,KAA0B,OAA9B,EACA;AACI,iBAAKL,OAAL,GAAe,IAAf;;AAEA,iBAAKtB,MAAL,GAAc,IAAd;AACH;;AAED,YAAMiF,WAAWJ,OAAOR,MAAxB;;AAEA,aAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIa,QAApB,EAA8Bb,GAA9B,EACA;AACI,gBAAMc,QAAQL,OAAOT,CAAP,CAAd;;AAEA,gBAAM3C,kBAAkB,KAAK0D,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,gBAAMtD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAKtD,SAA/C,EAA0D2G,KAA1D,EAAiEzD,eAAjE,CAAzB;;AAEAG,6BAAiBgC,IAAjB,CAAsBlC,aAAtB,GAAsCA,aAAtC;;AAEA,gBAAMgC,cAAcwB,MAAMvD,WAAN,KAAsB,OAAtB,GAAgC,KAAKlD,cAArC,GAAsD,IAA1E;;AAEA,iBAAKqD,kBAAL,CACIF,gBADJ,EAEI,KAAKhE,QAAL,CAAcmE,mBAFlB,EAGI,KAAKvC,kBAHT,EAIIkE,WAJJ;AAMA,iBAAKhB,IAAL,CAAU,aAAV,EAAyBd,gBAAzB;AACA,gBAAIsD,MAAMvD,WAAN,KAAsB,OAA1B,EAAmC,KAAKe,IAAL,CAAU,WAAV,EAAuBd,gBAAvB;AACnC,gBAAIsD,MAAMvD,WAAN,KAAsB,OAA1B,EAAmC,KAAKe,IAAL,CAAU,WAAV,EAAuBd,gBAAvB;AACtC;;AAED,YAAIiD,OAAO,CAAP,EAAUlD,WAAV,KAA0B,OAA9B,EACA;AACI,iBAAKK,aAAL,CAAmB,KAAKhC,MAAxB;;AAEA;AACH;AACJ,K;;AAED;;;;;;;;;;iCAQAR,kB,+BAAmBoC,gB,EAAkBS,a,EAAewB,G,EACpD;AACI,YAAM0B,IAAI3D,iBAAiBgC,IAAjB,CAAsBlC,aAAhC;;AAEA,YAAMuE,UAAWV,EAAE9C,IAAF,KAAW,WAAX,IAA0B8C,EAAE5D,WAAF,KAAkB,OAA7D;;AAEA,YAAMuE,UAAWX,EAAE9C,IAAF,KAAW,WAAX,IAA0B8C,EAAE5D,WAAF,KAAkB,OAA7D;;AAEA,YAAIuE,OAAJ,EACA;AACI,iBAAKxG,qBAAL,CAA2BkC,gBAA3B,EAA6CS,aAA7C,EAA4DwB,GAA5D;AACH;;AAED,YAAI,CAAC,KAAKpF,cAAN,IAAwBoF,GAA5B,EACA;AACI,iBAAKzB,aAAL,CAAmBC,aAAnB,EAAkC,aAAlC,EAAiDT,gBAAjD;AACA,gBAAIqE,OAAJ,EAAa,KAAK7D,aAAL,CAAmBC,aAAnB,EAAkC,WAAlC,EAA+CT,gBAA/C;AACb,gBAAIsE,OAAJ,EAAa,KAAK9D,aAAL,CAAmBC,aAAnB,EAAkC,WAAlC,EAA+CT,gBAA/C;AAChB;AACJ,K;;AAED;;;;;;;;iCAMAnC,Y,yBAAaiC,a,EACb;AACI,YAAMmD,SAAS,KAAKC,sBAAL,CAA4BpD,aAA5B,CAAf;;AAEA;AACA,YAAMwD,QAAQL,OAAO,CAAP,CAAd;;AAEA,YAAIK,MAAMvD,WAAN,KAAsB,OAA1B,EACA;AACI,iBAAKhD,iBAAL,GAAyB,KAAzB;AACA,iBAAKqD,aAAL,CAAmB,IAAnB;AACH;;AAED,YAAMP,kBAAkB,KAAK0D,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,YAAMtD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAKtD,SAA/C,EAA0D2G,KAA1D,EAAiEzD,eAAjE,CAAzB;;AAEAG,yBAAiBgC,IAAjB,CAAsBlC,aAAtB,GAAsCwD,KAAtC;;AAEA,aAAKpD,kBAAL,CAAwBF,gBAAxB,EAA0C,KAAKhE,QAAL,CAAcmE,mBAAxD,EAA6E,KAAKrC,qBAAlF,EAAyG,KAAzG;;AAEA,aAAKgD,IAAL,CAAU,YAAV,EAAwBd,gBAAxB;AACA,YAAIsD,MAAMvD,WAAN,KAAsB,OAA1B,EACA;AACI,iBAAKe,IAAL,CAAU,UAAV,EAAsBd,gBAAtB;AACH,SAHD,MAKA;AACI;AACA;AACA,iBAAKkE,kCAAL,CAAwCrE,gBAAgBvD,UAAxD;AACH;AACJ,K;;AAED;;;;;;;;;;iCAQAwB,qB,kCAAsBkC,gB,EAAkBS,a,EAAewB,G,EACvD;AACI,YAAM0B,IAAI3D,iBAAiBgC,IAAjB,CAAsBlC,aAAhC;;AAEA,YAAM8D,KAAK5D,iBAAiBgC,IAAjB,CAAsB1F,UAAjC;;AAEA,YAAMgI,UAAWX,EAAE9C,IAAF,KAAW,WAAX,IAA0B8C,EAAE9C,IAAF,KAAW,UAArC,IAAmD8C,EAAE5D,WAAF,KAAkB,OAAtF;;AAEA,YAAIqE,eAAe3D,cAAcoD,eAAd,CAA8BD,EAA9B,CAAnB;;AAEA;AACA,YAAI3B,OAAO,CAACmC,YAAZ,EACA;AACIA,2BAAe3D,cAAcoD,eAAd,CAA8BD,EAA9B,IAAoC,sCAA4BA,EAA5B,CAAnD;AACH;;AAED,YAAIQ,iBAAiBjI,SAArB,EAAgC;;AAEhC,YAAI8F,OAAO,KAAKlF,iBAAhB,EACA;AACI,gBAAI,CAACqH,aAAaU,IAAlB,EACA;AACIV,6BAAaU,IAAb,GAAoB,IAApB;AACA,qBAAKtE,aAAL,CAAmBC,aAAnB,EAAkC,aAAlC,EAAiDT,gBAAjD;AACA,oBAAIsE,OAAJ,EACA;AACI,yBAAK9D,aAAL,CAAmBC,aAAnB,EAAkC,WAAlC,EAA+CT,gBAA/C;AACH;AACJ;;AAED;AACA;AACA,gBAAIsE,WAAW,KAAKlG,MAAL,KAAgB,IAA/B,EACA;AACI,qBAAKA,MAAL,GAAcqC,cAAcrC,MAA5B;AACH;AACJ,SAlBD,MAmBK,IAAIgG,aAAaU,IAAjB,EACL;AACIV,yBAAaU,IAAb,GAAoB,KAApB;AACA,iBAAKtE,aAAL,CAAmBC,aAAnB,EAAkC,YAAlC,EAAgD,KAAK9D,SAArD;AACA,gBAAI2H,OAAJ,EACA;AACI,qBAAK9D,aAAL,CAAmBC,aAAnB,EAAkC,UAAlC,EAA8CT,gBAA9C;AACH;AACD;AACA,gBAAIoE,aAAaW,IAAjB,EACA;AACI,uBAAOtE,cAAcoD,eAAd,CAA8BD,EAA9B,CAAP;AACH;AACJ;AACJ,K;;AAED;;;;;;;;iCAMA7F,a,0BAAc+B,a,EACd;AACI,YAAMmD,SAAS,KAAKC,sBAAL,CAA4BpD,aAA5B,CAAf;;AAEA;AACA,YAAMwD,QAAQL,OAAO,CAAP,CAAd;;AAEA,YAAMpD,kBAAkB,KAAK0D,8BAAL,CAAoCD,KAApC,CAAxB;;AAEA,YAAMtD,mBAAmB,KAAKC,oCAAL,CAA0C,KAAKtD,SAA/C,EAA0D2G,KAA1D,EAAiEzD,eAAjE,CAAzB;;AAEAG,yBAAiBgC,IAAjB,CAAsBlC,aAAtB,GAAsCwD,KAAtC;;AAEA,YAAIA,MAAMvD,WAAN,KAAsB,OAA1B,EACA;AACI,iBAAKhD,iBAAL,GAAyB,IAAzB;AACH;;AAED,aAAK+D,IAAL,CAAU,aAAV,EAAyBd,gBAAzB;AACA,YAAIsD,MAAMvD,WAAN,KAAsB,OAA1B,EACA;AACI,iBAAKe,IAAL,CAAU,WAAV,EAAuBd,gBAAvB;AACH;AACJ,K;;AAED;;;;;;;;;iCAOAuD,8B,2CAA+BD,K,EAC/B;AACI,YAAMa,YAAYb,MAAMa,SAAxB;;AAEA,YAAIA,cAAcrI,gBAAd,IAAkCwH,MAAMvD,WAAN,KAAsB,OAA5D,EACA;AACI,mBAAO,KAAK1D,KAAZ;AACH,SAHD,MAIK,IAAI,KAAKI,qBAAL,CAA2B0H,SAA3B,CAAJ,EACL;AACI,mBAAO,KAAK1H,qBAAL,CAA2B0H,SAA3B,CAAP;AACH;;AAED,YAAMtE,kBAAkB,KAAKnD,mBAAL,CAAyBsI,GAAzB,MAAkC,+BAA1D;;AAEAnF,wBAAgBvD,UAAhB,GAA6B6H,SAA7B;AACA,aAAK1H,qBAAL,CAA2B0H,SAA3B,IAAwCtE,eAAxC;;AAEA,eAAOA,eAAP;AACH,K;;AAED;;;;;;;;iCAMAqE,kC,+CAAmCC,S,EACnC;AACI,YAAMtE,kBAAkB,KAAKpD,qBAAL,CAA2B0H,SAA3B,CAAxB;;AAEA,YAAItE,eAAJ,EACA;AACI,mBAAO,KAAKpD,qBAAL,CAA2B0H,SAA3B,CAAP;AACA,iBAAKzH,mBAAL,CAAyBuI,IAAzB,CAA8BpF,eAA9B;AACH;AACJ,K;;AAED;;;;;;;;;;;iCASAI,oC,iDAAqCD,gB,EAAkBkF,Y,EAAcrF,e,EACrE;AACIG,yBAAiBgC,IAAjB,GAAwBnC,eAAxB;;AAEA,aAAKkB,kBAAL,CAAwBlB,gBAAgBtD,MAAxC,EAAgD2I,aAAaC,OAA7D,EAAsED,aAAaE,OAAnF;;AAEA;AACA;AACA;AACA,YAAInG,UAAUwC,UAAV,IAAwByD,aAAanF,WAAb,KAA6B,OAAzD,EACA;AACIF,4BAAgBtD,MAAhB,CAAuB0E,CAAvB,GAA2BpB,gBAAgBtD,MAAhB,CAAuB0E,CAAvB,GAA2B,KAAK1C,UAA3D;AACAsB,4BAAgBtD,MAAhB,CAAuB2E,CAAvB,GAA2BrB,gBAAgBtD,MAAhB,CAAuB2E,CAAvB,GAA2B,KAAK3C,UAA3D;AACH;;AAED;AACA,YAAI2G,aAAanF,WAAb,KAA6B,OAAjC,EACA;AACImF,yBAAaG,OAAb,GAAuBxF,gBAAgBtD,MAAhB,CAAuB0E,CAA9C;AACAiE,yBAAaI,OAAb,GAAuBzF,gBAAgBtD,MAAhB,CAAuB2E,CAA9C;AACH;;AAEDrB,wBAAgBC,aAAhB,GAAgCoF,YAAhC;AACAlF,yBAAiBuF,MAAjB;;AAEA,eAAOvF,gBAAP;AACH,K;;AAED;;;;;;;;;;iCAQAkD,sB,mCAAuBI,K,EACvB;AACI,YAAMkC,mBAAmB,EAAzB;;AAEA,YAAI,KAAKxI,mBAAL,IAA4BsG,iBAAiBmC,UAAjD,EACA;AACI,iBAAK,IAAIjD,IAAI,CAAR,EAAWkD,KAAKpC,MAAMqC,cAAN,CAAqBlD,MAA1C,EAAkDD,IAAIkD,EAAtD,EAA0DlD,GAA1D,EACA;AACI,oBAAMoD,QAAQtC,MAAMqC,cAAN,CAAqBnD,CAArB,CAAd;;AAEA,oBAAI,OAAOoD,MAAMnC,MAAb,KAAwB,WAA5B,EAAyCmC,MAAMnC,MAAN,GAAeH,MAAMuC,OAAN,CAAcpD,MAAd,GAAuB,CAAvB,GAA2B,CAA1C;AACzC,oBAAI,OAAOmD,MAAME,OAAb,KAAyB,WAA7B,EAA0CF,MAAME,OAAN,GAAgBxC,MAAMuC,OAAN,CAAcpD,MAAd,GAAuB,CAAvB,GAA2B,CAA3C;AAC1C,oBAAI,OAAOmD,MAAMG,SAAb,KAA2B,WAA/B,EAA4CH,MAAMG,SAAN,GAAkBzC,MAAMuC,OAAN,CAAcpD,MAAd,KAAyB,CAA3C;AAC5C,oBAAI,OAAOmD,MAAMvE,KAAb,KAAuB,WAA3B,EAAwCuE,MAAMvE,KAAN,GAAcuE,MAAMI,OAAN,IAAiB,CAA/B;AACxC,oBAAI,OAAOJ,MAAMtE,MAAb,KAAwB,WAA5B,EAAyCsE,MAAMtE,MAAN,GAAesE,MAAMK,OAAN,IAAiB,CAAhC;AACzC,oBAAI,OAAOL,MAAMM,KAAb,KAAuB,WAA3B,EAAwCN,MAAMM,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAON,MAAMO,KAAb,KAAuB,WAA3B,EAAwCP,MAAMO,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAOP,MAAM7F,WAAb,KAA6B,WAAjC,EAA8C6F,MAAM7F,WAAN,GAAoB,OAApB;AAC9C,oBAAI,OAAO6F,MAAMzB,SAAb,KAA2B,WAA/B,EAA4CyB,MAAMzB,SAAN,GAAkByB,MAAMtJ,UAAN,IAAoB,CAAtC;AAC5C,oBAAI,OAAOsJ,MAAMQ,QAAb,KAA0B,WAA9B,EAA2CR,MAAMQ,QAAN,GAAiBR,MAAMS,KAAN,IAAe,GAAhC;AAC3C,oBAAI,OAAOT,MAAMU,QAAb,KAA0B,WAA9B,EAA2CV,MAAMU,QAAN,GAAiBV,MAAMW,aAAN,IAAuB,CAAxC;;AAE3C,oBAAI,OAAOX,MAAMY,MAAb,KAAwB,WAA5B,EAAyCZ,MAAMY,MAAN,GAAeZ,MAAMa,OAAN,GAAgBb,MAAMT,OAArC;AACzC,oBAAI,OAAOS,MAAMc,MAAb,KAAwB,WAA5B,EAAyCd,MAAMc,MAAN,GAAed,MAAMe,OAAN,GAAgBf,MAAMR,OAArC;;AAEzC;AACAQ,sBAAMzC,YAAN,GAAqB,IAArB;;AAEAqC,iCAAiBP,IAAjB,CAAsBW,KAAtB;AACH;AACJ;AACD;AA3BA,aA4BK,IAAItC,iBAAiBsD,UAAjB,KAAgC,CAAC,KAAK1J,qBAAN,IAA+B,EAAEoG,iBAAiBrG,OAAOE,YAA1B,CAA/D,CAAJ,EACL;AACI,oBAAI,OAAOmG,MAAMyC,SAAb,KAA2B,WAA/B,EAA4CzC,MAAMyC,SAAN,GAAkB,IAAlB;AAC5C,oBAAI,OAAOzC,MAAMjC,KAAb,KAAuB,WAA3B,EAAwCiC,MAAMjC,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAOiC,MAAMhC,MAAb,KAAwB,WAA5B,EAAyCgC,MAAMhC,MAAN,GAAe,CAAf;AACzC,oBAAI,OAAOgC,MAAM4C,KAAb,KAAuB,WAA3B,EAAwC5C,MAAM4C,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAO5C,MAAM6C,KAAb,KAAuB,WAA3B,EAAwC7C,MAAM6C,KAAN,GAAc,CAAd;AACxC,oBAAI,OAAO7C,MAAMvD,WAAb,KAA6B,WAAjC,EAA8CuD,MAAMvD,WAAN,GAAoB,OAApB;AAC9C,oBAAI,OAAOuD,MAAMa,SAAb,KAA2B,WAA/B,EAA4Cb,MAAMa,SAAN,GAAkBrI,gBAAlB;AAC5C,oBAAI,OAAOwH,MAAM8C,QAAb,KAA0B,WAA9B,EAA2C9C,MAAM8C,QAAN,GAAiB,GAAjB;AAC3C,oBAAI,OAAO9C,MAAMgD,QAAb,KAA0B,WAA9B,EAA2ChD,MAAMgD,QAAN,GAAiB,CAAjB;;AAE3C;AACAhD,sBAAMH,YAAN,GAAqB,IAArB;;AAEAqC,iCAAiBP,IAAjB,CAAsB3B,KAAtB;AACH,aAhBI,MAkBL;AACIkC,iCAAiBP,IAAjB,CAAsB3B,KAAtB;AACH;;AAED,eAAOkC,gBAAP;AACH,K;;AAED;;;;;;iCAIAqB,O,sBACA;AACI,aAAKlI,YAAL;;AAEA,aAAKmI,kBAAL;;AAEA,aAAK9K,QAAL,GAAgB,IAAhB;;AAEA,aAAKK,KAAL,GAAa,IAAb;;AAEA,aAAKM,SAAL,GAAiB,IAAjB;;AAEA,aAAKC,qBAAL,GAA6B,IAA7B;;AAEA,aAAKa,aAAL,GAAqB,IAArB;AACA,aAAKC,kBAAL,GAA0B,IAA1B;;AAEA,aAAKN,WAAL,GAAmB,IAAnB;AACA,aAAKE,gBAAL,GAAwB,IAAxB;;AAEA,aAAKC,eAAL,GAAuB,IAAvB;AACA,aAAKC,oBAAL,GAA4B,IAA5B;;AAEA,aAAKG,aAAL,GAAqB,IAArB;AACA,aAAKC,kBAAL,GAA0B,IAA1B;;AAEA,aAAKC,YAAL,GAAoB,IAApB;AACA,aAAKC,qBAAL,GAA6B,IAA7B;;AAEA,aAAKC,aAAL,GAAqB,IAArB;;AAEA,aAAKM,UAAL,GAAkB,IAAlB;AACH,K;;;;;kBA1/CgBtC,kB;;;AA6/CrBP,KAAKuL,aAAL,CAAmBC,cAAnB,CAAkC,aAAlC,EAAiDjL,kBAAjD;AACAP,KAAKyL,cAAL,CAAoBD,cAApB,CAAmC,aAAnC,EAAkDjL,kBAAlD","file":"InteractionManager.js","sourcesContent":["import * as core from '../core';\nimport InteractionData from './InteractionData';\nimport InteractionEvent from './InteractionEvent';\nimport InteractionTrackingData from './InteractionTrackingData';\nimport EventEmitter from 'eventemitter3';\nimport interactiveTarget from './interactiveTarget';\n\n// Mix interactiveTarget into core.DisplayObject.prototype, after deprecation has been handled\ncore.utils.mixins.delayMixin(\n    core.DisplayObject.prototype,\n    interactiveTarget\n);\n\nconst MOUSE_POINTER_ID = 'MOUSE';\n\n/**\n * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.interaction\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI.interaction\n */\nexport default class InteractionManager extends EventEmitter\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     * @param {object} [options] - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.\n     */\n    constructor(renderer, options)\n    {\n        super();\n\n        options = options || {};\n\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.SystemRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n        /**\n         * Frequency in milliseconds that the mousemove, moveover & mouseout interaction events will be checked.\n         *\n         * @member {number}\n         * @default 10\n         */\n        this.interactionFrequency = options.interactionFrequency || 10;\n\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.interaction.InteractionData}\n         */\n        this.mouse = new InteractionData();\n        this.mouse.identifier = MOUSE_POINTER_ID;\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        /**\n         * Actively tracked InteractionData\n         *\n         * @private\n         * @member {Object.<number,PIXI.interation.InteractionData>}\n         */\n        this.activeInteractionData = {};\n        this.activeInteractionData[MOUSE_POINTER_ID] = this.mouse;\n\n        /**\n         * Pool of unused InteractionData\n         *\n         * @private\n         * @member {PIXI.interation.InteractionData[]}\n         */\n        this.interactionDataPool = [];\n\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object}\n         */\n        this.eventData = new InteractionEvent();\n\n        /**\n         * The DOM element to bind to.\n         *\n         * @private\n         * @member {HTMLElement}\n         */\n        this.interactionDOMElement = null;\n\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursor\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM verison works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how pixi used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.moveWhenInside = false;\n\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.eventsAdded = false;\n\n        /**\n         * Is the mouse hovering over the renderer?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.mouseOverRenderer = false;\n\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsTouchEvents = 'ontouchstart' in window;\n\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsPointerEvents = !!window.PointerEvent;\n\n        // this will make it so that you don't have to call bind all the time\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerCancel = this.onPointerCancel.bind(this);\n        this.processPointerCancel = this.processPointerCancel.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        /**\n         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n         * and functions are called instead of changing the CSS.\n         * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n         * @member {Object.<string, (string|Function|Object.<string, string>)>}\n         */\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        /**\n         * The mode of the cursor that is being used.\n         * The value of this is a key from the cursorStyles dictionary.\n         *\n         * @member {string}\n         */\n        this.currentCursorMode = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {string}\n         */\n        this.cursor = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {PIXI.Point}\n         */\n        this._tempPoint = new core.Point();\n\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n\n        /**\n         * Fired when a pointer device button (usually a mouse button) is pressed on the display\n         * object.\n         *\n         * @event mousedown\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event rightdown\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse button) is released over the display\n         * object.\n         *\n         * @event mouseup\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event rightup\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse button) is pressed and released on\n         * the display object.\n         *\n         * @event click\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event rightclick\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.\n         *\n         * @event mouseupoutside\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.\n         *\n         * @event rightupoutside\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event mousemove\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event mouseover\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event mouseout\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event pointerdown\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         *\n         * @event pointerup\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event\n         *\n         * @event pointercancel\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event pointertap\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.\n         *\n         * @event pointerupoutside\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event pointermove\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event pointerover\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event pointerout\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event touchstart\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event touchend\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when the operating system cancels a touch\n         *\n         * @event touchcancel\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event tap\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.\n         *\n         * @event touchendoutside\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event touchmove\n         * @type {PIXI.interaction.InteractionData}\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n     * another DOM element to receive those events.\n     *\n     * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n     * @private\n     */\n    setTargetElement(element, resolution = 1)\n    {\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n    }\n\n    /**\n     * Registers all the DOM events\n     *\n     * @private\n     */\n    addEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.add(this.update, this);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n            this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = 'none';\n        }\n\n        /**\n         * These events are added first, so that if pointer events are normalised, they are fired\n         * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            window.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n            window.addEventListener('pointercancel', this.onPointerCancel, true);\n            window.addEventListener('pointerup', this.onPointerUp, true);\n        }\n\n        else\n        {\n            window.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n            window.addEventListener('mouseup', this.onPointerUp, true);\n\n            if (this.supportsTouchEvents)\n            {\n                this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n                this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n                this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n                this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n            }\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /**\n     * Removes all the DOM events that were previously registered\n     *\n     * @private\n     */\n    removeEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.remove(this.update, this);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = '';\n            this.interactionDOMElement.style['-ms-touch-action'] = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            window.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n            window.removeEventListener('pointercancel', this.onPointerCancel, true);\n            window.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n            window.removeEventListener('mouseup', this.onPointerUp, true);\n\n            if (this.supportsTouchEvents)\n            {\n                this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n                this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n                this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n                this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n            }\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects.\n     * Invoked by a throttled ticker update from {@link PIXI.ticker.shared}.\n     *\n     * @param {number} deltaTime - time delta since last tick\n     */\n    update(deltaTime)\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this.didMove)\n        {\n            this.didMove = false;\n\n            return;\n        }\n\n        this.cursor = null;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        for (const k in this.activeInteractionData)\n        {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.activeInteractionData.hasOwnProperty(k))\n            {\n                const interactionData = this.activeInteractionData[k];\n\n                if (interactionData.originalEvent && interactionData.pointerType !== 'touch')\n                {\n                    const interactionEvent = this.configureInteractionEventForDOMEvent(\n                        this.eventData,\n                        interactionData.originalEvent,\n                        interactionData\n                    );\n\n                    this.processInteractive(\n                        interactionEvent,\n                        this.renderer._lastObjectRendered,\n                        this.processPointerOverOut,\n                        true\n                    );\n                }\n            }\n        }\n\n        this.setCursorMode(this.cursor);\n\n        // TODO\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     *\n     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    setCursorMode(mode)\n    {\n        mode = mode || 'default';\n        // if the mode didn't actually change, bail early\n        if (this.currentCursorMode === mode)\n        {\n            return;\n        }\n        this.currentCursorMode = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    this.interactionDOMElement.style.cursor = style;\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    Object.assign(this.interactionDOMElement.style, style);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    dispatchEvent(displayObject, eventString, eventData)\n    {\n        if (!eventData.stopped)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if (displayObject[eventString])\n            {\n                displayObject[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the pixi view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param  {PIXI.Point} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    mapPositionToPoint(point, x, y)\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = { x: 0, y: 0, width: 0, height: 0 };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = navigator.isCocoonJS ? this.resolution : (1.0 / this.resolution);\n\n        point.x = ((x - rect.left) * (this.interactionDOMElement.width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * (this.interactionDOMElement.height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @private\n     * @param {InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @param {boolean} [interactive] - Whether the displayObject is interactive\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    processInteractive(interactionEvent, displayObject, func, hitTest, interactive)\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        const point = interactionEvent.data.global;\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimisation once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimisation is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // if the displayobject has a hitArea, then it does not need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            interactiveParent = false;\n        }\n        // it has a mask! Then lets hit test that before continuing\n        else if (hitTest && displayObject._mask)\n        {\n            if (!displayObject._mask.containsPoint(point))\n            {\n                hitTest = false;\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow pixi to completely ignore and bypass checking the displayObjects children.\n        if (displayObject.interactiveChildren && displayObject.children)\n        {\n            const children = displayObject.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                const childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent);\n\n                if (childHit)\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    if (childHit)\n                    {\n                        if (interactionEvent.target)\n                        {\n                            hitTest = false;\n                        }\n                        hit = true;\n                    }\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit - but only if it was interactive, otherwise we need to keep\n            // looking for an interactive child, just in case we hit one\n            if (hitTest && !interactionEvent.target)\n            {\n                if (displayObject.hitArea)\n                {\n                    displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                    if (displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y))\n                    {\n                        hit = true;\n                    }\n                }\n                else if (displayObject.containsPoint)\n                {\n                    if (displayObject.containsPoint(point))\n                    {\n                        hit = true;\n                    }\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !interactionEvent.target)\n                {\n                    interactionEvent.target = displayObject;\n                }\n\n                func(interactionEvent, displayObject, !!hit);\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n     */\n    onPointerDown(originalEvent)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        /**\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && events[0].isNormalized)\n        {\n            originalEvent.preventDefault();\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerDown, true);\n\n            this.emit('pointerdown', interactionEvent);\n            if (event.pointerType === 'touch')\n            {\n                this.emit('touchstart', interactionEvent);\n            }\n            else if (event.pointerType === 'mouse')\n            {\n                const isRightButton = event.button === 2 || event.which === 3;\n\n                this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n            }\n        }\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @private\n     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerDown(interactionEvent, displayObject, hit)\n    {\n        const e = interactionEvent.data.originalEvent;\n\n        const id = interactionEvent.data.identifier;\n\n        if (hit)\n        {\n            if (!displayObject.trackedPointers[id])\n            {\n                displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n            }\n            this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n            if (e.type === 'touchstart' || e.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n            }\n            else if (e.type === 'mousedown' || e.pointerType === 'mouse')\n            {\n                const isRightButton = e.button === 2 || e.which === 3;\n\n                if (isRightButton)\n                {\n                    displayObject.trackedPointers[id].rightDown = true;\n                }\n                else\n                {\n                    displayObject.trackedPointers[id].leftDown = true;\n                }\n\n                this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n     * @param {boolean} cancelled - true if the pointer is cancelled\n     * @param {Function} func - Function passed to {@link processInteractive}\n     */\n    onPointerComplete(originalEvent, cancelled, func)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, func, true);\n\n            this.emit(cancelled ? 'pointercancel' : 'pointerup', interactionEvent);\n\n            if (event.pointerType === 'mouse')\n            {\n                const isRightButton = event.button === 2 || event.which === 3;\n\n                this.emit(isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n            }\n            else if (event.pointerType === 'touch')\n            {\n                this.emit(cancelled ? 'touchcancel' : 'touchend', interactionEvent);\n                this.releaseInteractionDataForPointerId(event.pointerId, interactionData);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is cancelled\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerCancel(event)\n    {\n        this.onPointerComplete(event, true, this.processPointerCancel);\n    }\n\n    /**\n     * Processes the result of the pointer cancel check and dispatches the event if need be\n     *\n     * @private\n     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     */\n    processPointerCancel(interactionEvent, displayObject)\n    {\n        const e = interactionEvent.data.originalEvent;\n\n        const id = interactionEvent.data.identifier;\n\n        if (displayObject.trackedPointers[id] !== undefined)\n        {\n            delete displayObject.trackedPointers[id];\n            this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n            if (e.type === 'touchcancel' || e.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerUp(event)\n    {\n        this.onPointerComplete(event, false, this.processPointerUp);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @private\n     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerUp(interactionEvent, displayObject, hit)\n    {\n        const e = interactionEvent.data.originalEvent;\n\n        const id = interactionEvent.data.identifier;\n\n        const trackingData = displayObject.trackedPointers[id];\n\n        const isTouch = (e.type === 'touchend' || e.pointerType === 'touch');\n\n        const isMouse = (e.type.indexOf('mouse') === 0 || e.pointerType === 'mouse');\n\n        // Mouse only\n        if (isMouse)\n        {\n            const isRightButton = e.button === 2 || e.which === 3;\n\n            const flags = InteractionTrackingData.FLAGS;\n\n            const test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n\n            const isDown = trackingData !== undefined && (trackingData.flags & test);\n\n            if (hit)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n                if (isDown)\n                {\n                    this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n                }\n            }\n            else if (isDown)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n            }\n            // update the down state of the tracking data\n            if (trackingData)\n            {\n                if (isRightButton)\n                {\n                    trackingData.rightDown = false;\n                }\n                else\n                {\n                    trackingData.leftDown = false;\n                }\n            }\n        }\n\n        // Pointers and Touches, and Mouse\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n            if (trackingData)\n            {\n                this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n                if (isTouch)\n                {\n                    this.dispatchEvent(displayObject, 'tap', interactionEvent);\n                    // touches are no longer over (if they ever were) when we get the touchend\n                    // so we should ensure that we don't keep pretending that they are\n                    trackingData.over = false;\n                }\n            }\n        }\n        else if (trackingData)\n        {\n            this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n        }\n        // Only remove the tracking data if there is no over/down state still associated with it\n        if (trackingData && trackingData.none)\n        {\n            delete displayObject.trackedPointers[id];\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n     */\n    onPointerMove(originalEvent)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.didMove = true;\n\n            this.cursor = null;\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            const interactive = event.pointerType === 'touch' ? this.moveWhenInside : true;\n\n            this.processInteractive(\n                interactionEvent,\n                this.renderer._lastObjectRendered,\n                this.processPointerMove,\n                interactive\n            );\n            this.emit('pointermove', interactionEvent);\n            if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n            if (event.pointerType === 'mouse') this.emit('mousemove', interactionEvent);\n        }\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.setCursorMode(this.cursor);\n\n            // TODO BUG for parents interactive object (border order issue)\n        }\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @private\n     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerMove(interactionEvent, displayObject, hit)\n    {\n        const e = interactionEvent.data.originalEvent;\n\n        const isTouch = (e.type === 'touchmove' || e.pointerType === 'touch');\n\n        const isMouse = (e.type === 'mousemove' || e.pointerType === 'mouse');\n\n        if (isMouse)\n        {\n            this.processPointerOverOut(interactionEvent, displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n            if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n     */\n    onPointerOut(originalEvent)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOut, so events will always be length 1\n        const event = events[0];\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = false;\n            this.setCursorMode(null);\n        }\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', interactionEvent);\n        if (event.pointerType === 'mouse')\n        {\n            this.emit('mouseout', interactionEvent);\n        }\n        else\n        {\n            // we can get touchleave events after touchend, so we want to make sure we don't\n            // introduce memory leaks\n            this.releaseInteractionDataForPointerId(interactionData.identifier);\n        }\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerOverOut(interactionEvent, displayObject, hit)\n    {\n        const e = interactionEvent.data.originalEvent;\n\n        const id = interactionEvent.data.identifier;\n\n        const isMouse = (e.type === 'mouseover' || e.type === 'mouseout' || e.pointerType === 'mouse');\n\n        let trackingData = displayObject.trackedPointers[id];\n\n        // if we just moused over the display object, then we need to track that state\n        if (hit && !trackingData)\n        {\n            trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n        }\n\n        if (trackingData === undefined) return;\n\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!trackingData.over)\n            {\n                trackingData.over = true;\n                this.dispatchEvent(displayObject, 'pointerover', interactionEvent);\n                if (isMouse)\n                {\n                    this.dispatchEvent(displayObject, 'mouseover', interactionEvent);\n                }\n            }\n\n            // only change the cursor if it has not already been changed (by something deeper in the\n            // display tree)\n            if (isMouse && this.cursor === null)\n            {\n                this.cursor = displayObject.cursor;\n            }\n        }\n        else if (trackingData.over)\n        {\n            trackingData.over = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n            if (isMouse)\n            {\n                this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n            }\n            // if there is no mouse down information for the pointer, then it is safe to delete\n            if (trackingData.none)\n            {\n                delete displayObject.trackedPointers[id];\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n     */\n    onPointerOver(originalEvent)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOver, so events will always be length 1\n        const event = events[0];\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = true;\n        }\n\n        this.emit('pointerover', interactionEvent);\n        if (event.pointerType === 'mouse')\n        {\n            this.emit('mouseover', interactionEvent);\n        }\n    }\n\n    /**\n     * Get InteractionData for a given pointerId. Store that data as well\n     *\n     * @private\n     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n     * @return {InteractionData} - Interaction data for the given pointer identifier\n     */\n    getInteractionDataForPointerId(event)\n    {\n        const pointerId = event.pointerId;\n\n        if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse')\n        {\n            return this.mouse;\n        }\n        else if (this.activeInteractionData[pointerId])\n        {\n            return this.activeInteractionData[pointerId];\n        }\n\n        const interactionData = this.interactionDataPool.pop() || new InteractionData();\n\n        interactionData.identifier = pointerId;\n        this.activeInteractionData[pointerId] = interactionData;\n\n        return interactionData;\n    }\n\n    /**\n     * Return unused InteractionData to the pool, for a given pointerId\n     *\n     * @private\n     * @param {number} pointerId - Identifier from a pointer event\n     */\n    releaseInteractionDataForPointerId(pointerId)\n    {\n        const interactionData = this.activeInteractionData[pointerId];\n\n        if (interactionData)\n        {\n            delete this.activeInteractionData[pointerId];\n            this.interactionDataPool.push(interactionData);\n        }\n    }\n\n    /**\n     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n     *\n     * @private\n     * @param {InteractionEvent} interactionEvent - The event to be configured\n     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n     * @param {InteractionData} interactionData - The InteractionData that will be paired with the InteractionEvent\n     * @return {InteractionEvent} the interaction event that was passed in\n     */\n    configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData)\n    {\n        interactionEvent.data = interactionData;\n\n        this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n        // This is the way InteractionManager processed touch events before the refactoring, so I've kept\n        // it here. But it doesn't make that much sense to me, since mapPositionToPoint already factors\n        // in this.resolution, so this just divides by this.resolution twice for touch events...\n        if (navigator.isCocoonJS && pointerEvent.pointerType === 'touch')\n        {\n            interactionData.global.x = interactionData.global.x / this.resolution;\n            interactionData.global.y = interactionData.global.y / this.resolution;\n        }\n\n        // Not really sure why this is happening, but it's how a previous version handled things\n        if (pointerEvent.pointerType === 'touch')\n        {\n            pointerEvent.globalX = interactionData.global.x;\n            pointerEvent.globalY = interactionData.global.y;\n        }\n\n        interactionData.originalEvent = pointerEvent;\n        interactionEvent._reset();\n\n        return interactionEvent;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @private\n     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    normalizeToPointerData(event)\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i];\n\n                if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n                if (typeof touch.isPrimary === 'undefined') touch.isPrimary = event.touches.length === 1;\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.rotation === 'undefined') touch.rotation = touch.rotationAngle || 0;\n\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent)))\n        {\n            if (typeof event.isPrimary === 'undefined') event.isPrimary = true;\n            if (typeof event.width === 'undefined') event.width = 1;\n            if (typeof event.height === 'undefined') event.height = 1;\n            if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n            if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n            if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';\n            if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID;\n            if (typeof event.pressure === 'undefined') event.pressure = 0.5;\n            if (typeof event.rotation === 'undefined') event.rotation = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            event.isNormalized = true;\n\n            normalizedEvents.push(event);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents;\n    }\n\n    /**\n     * Destroys the interaction manager\n     *\n     */\n    destroy()\n    {\n        this.removeEvents();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactionDOMElement = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerCancel = null;\n        this.processPointerCancel = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this._tempPoint = null;\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);\n"]}