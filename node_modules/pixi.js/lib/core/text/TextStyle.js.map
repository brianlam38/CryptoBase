{"version":3,"sources":["../../../src/core/text/TextStyle.js"],"names":["defaultStyle","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","Math","PI","dropShadowBlur","dropShadowColor","dropShadowDistance","fill","fillGradientType","LINEAR_VERTICAL","fillGradientStops","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","wordWrap","wordWrapWidth","TextStyle","style","styleID","Object","assign","clone","clonedProperties","key","reset","_align","_breakWords","_dropShadow","_dropShadowAlpha","_dropShadowAngle","_dropShadowBlur","_dropShadowColor","outputColor","getColor","_dropShadowDistance","_fill","_fillGradientType","_fillGradientStops","areArraysEqual","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","_lineHeight","_lineJoin","_miterLimit","_padding","_stroke","_strokeThickness","_textBaseline","_trim","_wordWrap","_wordWrapWidth","getSingleColor","color","indexOf","replace","Array","isArray","i","length","array1","array2"],"mappings":";;;;qjBAAA;AACA;;AAEA;;AACA;;;;AAEA,IAAMA,eAAe;AACjBC,WAAO,MADU;AAEjBC,gBAAY,KAFK;AAGjBC,gBAAY,KAHK;AAIjBC,qBAAiB,CAJA;AAKjBC,qBAAiBC,KAAKC,EAAL,GAAU,CALV;AAMjBC,oBAAgB,CANC;AAOjBC,qBAAiB,SAPA;AAQjBC,wBAAoB,CARH;AASjBC,UAAM,OATW;AAUjBC,sBAAkB,qBAAcC,eAVf;AAWjBC,uBAAmB,EAXF;AAYjBC,gBAAY,OAZK;AAajBC,cAAU,EAbO;AAcjBC,eAAW,QAdM;AAejBC,iBAAa,QAfI;AAgBjBC,gBAAY,QAhBK;AAiBjBC,mBAAe,CAjBE;AAkBjBC,gBAAY,CAlBK;AAmBjBC,cAAU,OAnBO;AAoBjBC,gBAAY,EApBK;AAqBjBC,aAAS,CArBQ;AAsBjBC,YAAQ,OAtBS;AAuBjBC,qBAAiB,CAvBA;AAwBjBC,kBAAc,YAxBG;AAyBjBC,UAAM,KAzBW;AA0BjBC,cAAU,KA1BO;AA2BjBC,mBAAe;AA3BE,CAArB;;AA8BA;;;;;;;;IAOqBC,S;AAEjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,uBAAYC,KAAZ,EACA;AAAA;;AACI,aAAKC,OAAL,GAAe,CAAf;;AAEAC,eAAOC,MAAP,CAAc,IAAd,EAAoBnC,YAApB,EAAkCgC,KAAlC;AACH;;AAED;;;;;;;;wBAMAI,K,oBACA;AACI,YAAMC,mBAAmB,EAAzB;;AAEA,aAAK,IAAMC,GAAX,IAAkBtC,YAAlB,EACA;AACIqC,6BAAiBC,GAAjB,IAAwB,KAAKA,GAAL,CAAxB;AACH;;AAED,eAAO,IAAIP,SAAJ,CAAcM,gBAAd,CAAP;AACH,K;;AAED;;;;;wBAGAE,K,oBACA;AACIL,eAAOC,MAAP,CAAc,IAAd,EAAoBnC,YAApB;AACH,K;;;;4BAGD;AACI,mBAAO,KAAKwC,MAAZ;AACH,S;0BACSvC,K,EACV;AACI,gBAAI,KAAKuC,MAAL,KAAgBvC,KAApB,EACA;AACI,qBAAKuC,MAAL,GAAcvC,KAAd;AACA,qBAAKgC,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKQ,WAAZ;AACH,S;0BACcvC,U,EACf;AACI,gBAAI,KAAKuC,WAAL,KAAqBvC,UAAzB,EACA;AACI,qBAAKuC,WAAL,GAAmBvC,UAAnB;AACA,qBAAK+B,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKS,WAAZ;AACH,S;0BACcvC,U,EACf;AACI,gBAAI,KAAKuC,WAAL,KAAqBvC,UAAzB,EACA;AACI,qBAAKuC,WAAL,GAAmBvC,UAAnB;AACA,qBAAK8B,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKU,gBAAZ;AACH,S;0BACmBvC,e,EACpB;AACI,gBAAI,KAAKuC,gBAAL,KAA0BvC,eAA9B,EACA;AACI,qBAAKuC,gBAAL,GAAwBvC,eAAxB;AACA,qBAAK6B,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKW,gBAAZ;AACH,S;0BACmBvC,e,EACpB;AACI,gBAAI,KAAKuC,gBAAL,KAA0BvC,eAA9B,EACA;AACI,qBAAKuC,gBAAL,GAAwBvC,eAAxB;AACA,qBAAK4B,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKY,eAAZ;AACH,S;0BACkBrC,c,EACnB;AACI,gBAAI,KAAKqC,eAAL,KAAyBrC,cAA7B,EACA;AACI,qBAAKqC,eAAL,GAAuBrC,cAAvB;AACA,qBAAKyB,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKa,gBAAZ;AACH,S;0BACmBrC,e,EACpB;AACI,gBAAMsC,cAAcC,SAASvC,eAAT,CAApB;AACA,gBAAI,KAAKqC,gBAAL,KAA0BC,WAA9B,EACA;AACI,qBAAKD,gBAAL,GAAwBC,WAAxB;AACA,qBAAKd,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKgB,mBAAZ;AACH,S;0BACsBvC,kB,EACvB;AACI,gBAAI,KAAKuC,mBAAL,KAA6BvC,kBAAjC,EACA;AACI,qBAAKuC,mBAAL,GAA2BvC,kBAA3B;AACA,qBAAKuB,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKiB,KAAZ;AACH,S;0BACQvC,I,EACT;AACI,gBAAMoC,cAAcC,SAASrC,IAAT,CAApB;AACA,gBAAI,KAAKuC,KAAL,KAAeH,WAAnB,EACA;AACI,qBAAKG,KAAL,GAAaH,WAAb;AACA,qBAAKd,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKkB,iBAAZ;AACH,S;0BACoBvC,gB,EACrB;AACI,gBAAI,KAAKuC,iBAAL,KAA2BvC,gBAA/B,EACA;AACI,qBAAKuC,iBAAL,GAAyBvC,gBAAzB;AACA,qBAAKqB,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKmB,kBAAZ;AACH,S;0BACqBtC,iB,EACtB;AACI,gBAAI,CAACuC,eAAe,KAAKD,kBAApB,EAAuCtC,iBAAvC,CAAL,EACA;AACI,qBAAKsC,kBAAL,GAA0BtC,iBAA1B;AACA,qBAAKmB,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKqB,WAAZ;AACH,S;0BACcvC,U,EACf;AACI,gBAAI,KAAKA,UAAL,KAAoBA,UAAxB,EACA;AACI,qBAAKuC,WAAL,GAAmBvC,UAAnB;AACA,qBAAKkB,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKsB,SAAZ;AACH,S;0BACYvC,Q,EACb;AACI,gBAAI,KAAKuC,SAAL,KAAmBvC,QAAvB,EACA;AACI,qBAAKuC,SAAL,GAAiBvC,QAAjB;AACA,qBAAKiB,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKuB,UAAZ;AACH,S;0BACavC,S,EACd;AACI,gBAAI,KAAKuC,UAAL,KAAoBvC,SAAxB,EACA;AACI,qBAAKuC,UAAL,GAAkBvC,SAAlB;AACA,qBAAKgB,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKwB,YAAZ;AACH,S;0BACevC,W,EAChB;AACI,gBAAI,KAAKuC,YAAL,KAAsBvC,WAA1B,EACA;AACI,qBAAKuC,YAAL,GAAoBvC,WAApB;AACA,qBAAKe,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKyB,WAAZ;AACH,S;0BACcvC,U,EACf;AACI,gBAAI,KAAKuC,WAAL,KAAqBvC,UAAzB,EACA;AACI,qBAAKuC,WAAL,GAAmBvC,UAAnB;AACA,qBAAKc,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAK0B,cAAZ;AACH,S;0BACiBvC,a,EAClB;AACI,gBAAI,KAAKuC,cAAL,KAAwBvC,aAA5B,EACA;AACI,qBAAKuC,cAAL,GAAsBvC,aAAtB;AACA,qBAAKa,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAK2B,WAAZ;AACH,S;0BACcvC,U,EACf;AACI,gBAAI,KAAKuC,WAAL,KAAqBvC,UAAzB,EACA;AACI,qBAAKuC,WAAL,GAAmBvC,UAAnB;AACA,qBAAKY,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAK4B,SAAZ;AACH,S;0BACYvC,Q,EACb;AACI,gBAAI,KAAKuC,SAAL,KAAmBvC,QAAvB,EACA;AACI,qBAAKuC,SAAL,GAAiBvC,QAAjB;AACA,qBAAKW,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAK6B,WAAZ;AACH,S;0BACcvC,U,EACf;AACI,gBAAI,KAAKuC,WAAL,KAAqBvC,UAAzB,EACA;AACI,qBAAKuC,WAAL,GAAmBvC,UAAnB;AACA,qBAAKU,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAK8B,QAAZ;AACH,S;0BACWvC,O,EACZ;AACI,gBAAI,KAAKuC,QAAL,KAAkBvC,OAAtB,EACA;AACI,qBAAKuC,QAAL,GAAgBvC,OAAhB;AACA,qBAAKS,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAK+B,OAAZ;AACH,S;0BACUvC,M,EACX;AACI,gBAAMsB,cAAcC,SAASvB,MAAT,CAApB;AACA,gBAAI,KAAKuC,OAAL,KAAiBjB,WAArB,EACA;AACI,qBAAKiB,OAAL,GAAejB,WAAf;AACA,qBAAKd,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKgC,gBAAZ;AACH,S;0BACmBvC,e,EACpB;AACI,gBAAI,KAAKuC,gBAAL,KAA0BvC,eAA9B,EACA;AACI,qBAAKuC,gBAAL,GAAwBvC,eAAxB;AACA,qBAAKO,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKiC,aAAZ;AACH,S;0BACgBvC,Y,EACjB;AACI,gBAAI,KAAKuC,aAAL,KAAuBvC,YAA3B,EACA;AACI,qBAAKuC,aAAL,GAAqBvC,YAArB;AACA,qBAAKM,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKkC,KAAZ;AACH,S;0BACQvC,I,EACT;AACI,gBAAI,KAAKuC,KAAL,KAAevC,IAAnB,EACA;AACI,qBAAKuC,KAAL,GAAavC,IAAb;AACA,qBAAKK,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKmC,SAAZ;AACH,S;0BACYvC,Q,EACb;AACI,gBAAI,KAAKuC,SAAL,KAAmBvC,QAAvB,EACA;AACI,qBAAKuC,SAAL,GAAiBvC,QAAjB;AACA,qBAAKI,OAAL;AACH;AACJ;;;4BAGD;AACI,mBAAO,KAAKoC,cAAZ;AACH,S;0BACiBvC,a,EAClB;AACI,gBAAI,KAAKuC,cAAL,KAAwBvC,aAA5B,EACA;AACI,qBAAKuC,cAAL,GAAsBvC,aAAtB;AACA,qBAAKG,OAAL;AACH;AACJ;;;;;;AAGL;;;;;;;;kBAlbqBF,S;AAwbrB,SAASuC,cAAT,CAAwBC,KAAxB,EACA;AACI,QAAI,OAAOA,KAAP,KAAiB,QAArB,EACA;AACI,eAAO,uBAAWA,KAAX,CAAP;AACH,KAHD,MAIK,IAAK,OAAOA,KAAP,KAAiB,QAAtB,EACL;AACI,YAAKA,MAAMC,OAAN,CAAc,IAAd,MAAwB,CAA7B,EACA;AACID,oBAAQA,MAAME,OAAN,CAAc,IAAd,EAAoB,GAApB,CAAR;AACH;AACJ;;AAED,WAAOF,KAAP;AACH;;AAED;;;;;;;AAOA,SAASvB,QAAT,CAAkBuB,KAAlB,EACA;AACI,QAAI,CAACG,MAAMC,OAAN,CAAcJ,KAAd,CAAL,EACA;AACI,eAAOD,eAAeC,KAAf,CAAP;AACH,KAHD,MAKA;AACI,aAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIL,MAAMM,MAA1B,EAAkC,EAAED,CAApC,EACA;AACIL,kBAAMK,CAAN,IAAWN,eAAeC,MAAMK,CAAN,CAAf,CAAX;AACH;;AAED,eAAOL,KAAP;AACH;AACJ;;AAED;;;;;;;;AAQA,SAASlB,cAAT,CAAwByB,MAAxB,EAAgCC,MAAhC,EACA;AACI,QAAI,CAACL,MAAMC,OAAN,CAAcG,MAAd,CAAD,IAA0B,CAACJ,MAAMC,OAAN,CAAcI,MAAd,CAA/B,EACA;AACI,eAAO,KAAP;AACH;;AAED,QAAID,OAAOD,MAAP,KAAkBE,OAAOF,MAA7B,EACA;AACI,eAAO,KAAP;AACH;;AAED,SAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIE,OAAOD,MAA3B,EAAmC,EAAED,CAArC,EACA;AACI,YAAIE,OAAOF,CAAP,MAAcG,OAAOH,CAAP,CAAlB,EACA;AACI,mBAAO,KAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH","file":"TextStyle.js","sourcesContent":["// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from '../const';\nimport { hex2string } from '../utils';\n\nconst defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: '#000000',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    wordWrap: false,\n    wordWrapWidth: 100,\n};\n\n/**\n * A TextStyle Object decorates a Text Object. It can be shared between\n * multiple Text objects. Changing the style will update all text objects using it.\n *\n * @class\n * @memberof PIXI\n */\nexport default class TextStyle\n{\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string} [style.dropShadowColor='#000000'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', 800' or '900')\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Default is 'miter' (creates a sharp corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style)\n    {\n        this.styleID = 0;\n\n        Object.assign(this, defaultStyle, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    clone()\n    {\n        const clonedProperties = {};\n\n        for (const key in defaultStyle)\n        {\n            clonedProperties[key] = this[key];\n        }\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    reset()\n    {\n        Object.assign(this, defaultStyle);\n    }\n\n    get align()\n    {\n        return this._align;\n    }\n    set align(align)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    get breakWords()\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    get dropShadow()\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    get dropShadowAlpha()\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    get dropShadowAngle()\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    get dropShadowBlur()\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    get dropShadowColor()\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    get dropShadowDistance()\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    get fill()\n    {\n        return this._fill;\n    }\n    set fill(fill)\n    {\n        const outputColor = getColor(fill);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    get fillGradientType()\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    get fillGradientStops()\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops)\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    get fontFamily()\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily)\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    get fontSize()\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    get fontStyle()\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    get fontVariant()\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    get fontWeight()\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    get lineHeight()\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    get lineJoin()\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    get miterLimit()\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    get padding()\n    {\n        return this._padding;\n    }\n    set padding(padding)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    get stroke()\n    {\n        return this._stroke;\n    }\n    set stroke(stroke)\n    {\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    get strokeThickness()\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    get textBaseline()\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    get trim()\n    {\n        return this._trim;\n    }\n    set trim(trim)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    get wordWrap()\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    get wordWrapWidth()\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n *\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color)\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if ( typeof color === 'string' )\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n *\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color)\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n *\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2)\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n"]}