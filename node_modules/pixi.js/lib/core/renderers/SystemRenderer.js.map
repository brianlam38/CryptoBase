{"version":3,"sources":["../../../src/core/renderers/SystemRenderer.js"],"names":["tempMatrix","SystemRenderer","system","screenWidth","screenHeight","options","i","RENDER_OPTIONS","type","UNKNOWN","screen","view","document","createElement","resolution","RESOLUTION","transparent","autoResize","blendModes","preserveDrawingBuffer","clearBeforeRender","roundPixels","_backgroundColor","_backgroundColorRgba","_backgroundColorString","backgroundColor","_tempDisplayObjectParent","_lastObjectRendered","resize","width","height","style","generateTexture","displayObject","scaleMode","bounds","getLocalBounds","renderTexture","create","tx","x","ty","y","render","destroy","removeView","parentNode","removeChild","value"],"mappings":"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","file":"SystemRenderer.js","sourcesContent":["import { sayHello, hex2string, hex2rgb } from '../utils';\nimport { Matrix, Rectangle } from '../math';\nimport { RENDERER_TYPE } from '../const';\nimport settings from '../settings';\nimport Container from '../display/Container';\nimport RenderTexture from '../textures/RenderTexture';\nimport EventEmitter from 'eventemitter3';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The SystemRenderer is the base for a Pixi Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n * and {@link PIXI.WebGLRenderer} which can be used for rendering a Pixi scene.\n *\n * @abstract\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class SystemRenderer extends EventEmitter\n{\n    /**\n     * @param {string} system - The name of the system this renderer is for.\n     * @param {number} [screenWidth=800] - the width of the screen\n     * @param {number} [screenHeight=600] - the height of the screen\n     * @param {object} [options] - The optional renderer parameters\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false\n     * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the CanvasRenderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {boolean} [options.roundPixels=false] - If true Pixi will Math.floor() x/y values when rendering,\n     *  stopping pixel interpolation.\n     */\n    constructor(system, screenWidth, screenHeight, options)\n    {\n        super();\n\n        sayHello(system);\n\n        // prepare options\n        if (options)\n        {\n            for (const i in settings.RENDER_OPTIONS)\n            {\n                if (typeof options[i] === 'undefined')\n                {\n                    options[i] = settings.RENDER_OPTIONS[i];\n                }\n            }\n        }\n        else\n        {\n            options = settings.RENDER_OPTIONS;\n        }\n\n        /**\n         * The type of the renderer.\n         *\n         * @member {number}\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = RENDERER_TYPE.UNKNOWN;\n\n        /**\n         * Measurements of the screen. (0, 0, screenWidth, screenHeight)\n         *\n         * Its safe to use as filterArea or hitArea for whole stage\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.screen = new Rectangle(0, 0, screenWidth || 800, screenHeight || 600);\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.view = options.view || document.createElement('canvas');\n\n        /**\n         * The resolution / device pixel ratio of the renderer\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = options.resolution || settings.RESOLUTION;\n\n        /**\n         * Whether the render view is transparent\n         *\n         * @member {boolean}\n         */\n        this.transparent = options.transparent;\n\n        /**\n         * Whether css dimensions of canvas view should be resized to screen dimensions automatically\n         *\n         * @member {boolean}\n         */\n        this.autoResize = options.autoResize || false;\n\n        /**\n         * Tracks the blend modes useful for this renderer.\n         *\n         * @member {object<string, mixed>}\n         */\n        this.blendModes = null;\n\n        /**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         *\n         * @member {boolean}\n         */\n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n        /**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent Pixi will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent Pixi will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example if\n         * your game has a canvas filling background image you often don't need this set.\n         *\n         * @member {boolean}\n         * @default\n         */\n        this.clearBeforeRender = options.clearBeforeRender;\n\n        /**\n         * If true Pixi will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Handy for crisp pixel art and speed on legacy devices.\n         *\n         * @member {boolean}\n         */\n        this.roundPixels = options.roundPixels;\n\n        /**\n         * The background color as a number.\n         *\n         * @member {number}\n         * @private\n         */\n        this._backgroundColor = 0x000000;\n\n        /**\n         * The background color as an [R, G, B] array.\n         *\n         * @member {number[]}\n         * @private\n         */\n        this._backgroundColorRgba = [0, 0, 0, 0];\n\n        /**\n         * The background color as a string.\n         *\n         * @member {string}\n         * @private\n         */\n        this._backgroundColorString = '#000000';\n\n        this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n\n        /**\n         * This temporary display object used as the parent of the currently being rendered item\n         *\n         * @member {PIXI.DisplayObject}\n         * @private\n         */\n        this._tempDisplayObjectParent = new Container();\n\n        /**\n         * The last root object that the renderer tried to render.\n         *\n         * @member {PIXI.DisplayObject}\n         * @private\n         */\n        this._lastObjectRendered = this._tempDisplayObjectParent;\n    }\n\n    /**\n     * Same as view.width, actual number of pixels in the canvas by horizontal\n     *\n     * @member {number}\n     * @readonly\n     * @default 800\n     */\n    get width()\n    {\n        return this.view.width;\n    }\n\n    /**\n     * Same as view.height, actual number of pixels in the canvas by vertical\n     *\n     * @member {number}\n     * @readonly\n     * @default 600\n     */\n    get height()\n    {\n        return this.view.height;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified width and height\n     * Canvas dimensions are multiplied by resolution\n     *\n     * @param {number} screenWidth - the new width of the screen\n     * @param {number} screenHeight - the new height of the screen\n     */\n    resize(screenWidth, screenHeight)\n    {\n        this.screen.width = screenWidth;\n        this.screen.height = screenHeight;\n\n        this.view.width = screenWidth * this.resolution;\n        this.view.height = screenHeight * this.resolution;\n\n        if (this.autoResize)\n        {\n            this.view.style.width = `${screenWidth}px`;\n            this.view.style.height = `${screenHeight}px`;\n        }\n    }\n\n    /**\n     * Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n     *\n     * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from\n     * @param {number} scaleMode - Should be one of the scaleMode consts\n     * @param {number} resolution - The resolution / device pixel ratio of the texture being generated\n     * @return {PIXI.Texture} a texture of the graphics object\n     */\n    generateTexture(displayObject, scaleMode, resolution)\n    {\n        const bounds = displayObject.getLocalBounds();\n\n        const renderTexture = RenderTexture.create(bounds.width | 0, bounds.height | 0, scaleMode, resolution);\n\n        tempMatrix.tx = -bounds.x;\n        tempMatrix.ty = -bounds.y;\n\n        this.render(displayObject, renderTexture, false, tempMatrix, true);\n\n        return renderTexture;\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView)\n    {\n        if (removeView && this.view.parentNode)\n        {\n            this.view.parentNode.removeChild(this.view);\n        }\n\n        this.type = RENDERER_TYPE.UNKNOWN;\n\n        this.view = null;\n\n        this.screen = null;\n\n        this.resolution = 0;\n\n        this.transparent = false;\n\n        this.autoResize = false;\n\n        this.blendModes = null;\n\n        this.preserveDrawingBuffer = false;\n        this.clearBeforeRender = false;\n\n        this.roundPixels = false;\n\n        this._backgroundColor = 0;\n        this._backgroundColorRgba = null;\n        this._backgroundColorString = null;\n\n        this.backgroundColor = 0;\n        this._tempDisplayObjectParent = null;\n        this._lastObjectRendered = null;\n    }\n\n    /**\n     * The background color to fill if not transparent\n     *\n     * @member {number}\n     */\n    get backgroundColor()\n    {\n        return this._backgroundColor;\n    }\n\n    set backgroundColor(value) // eslint-disable-line require-jsdoc\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n        hex2rgb(value, this._backgroundColorRgba);\n    }\n}\n"]}