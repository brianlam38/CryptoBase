{"version":3,"sources":["../../../../src/core/sprites/webgl/SpriteRenderer.js"],"names":["TICK","TEXTURE_TICK","SpriteRenderer","renderer","vertSize","vertByteSize","size","SPRITE_BATCH_SIZE","buffers","i","nextPow2","push","indices","shader","currentIndex","groups","k","textures","textureCount","ids","start","blend","sprites","vertexBuffers","vaos","vaoMax","vertexCount","on","onPrerender","onContextChange","gl","legacy","MAX_TEXTURES","Math","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","SPRITE_MAX_TEXTURES","indexBuffer","GLBuffer","createIndexBuffer","STATIC_DRAW","bindVao","createVertexBuffer","STREAM_DRAW","createVao","addIndex","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","UNSIGNED_SHORT","aColor","UNSIGNED_BYTE","aTextureId","vao","currentBlendMode","boundTextures","Array","render","sprite","flush","_texture","_uvs","np2","log2","buffer","float32View","uint32View","rendererBoundTextures","touch","textureGC","count","index","nextTexture","currentTexture","groupCount","currentGroup","vertexData","uvs","blendMode","_virtalBoundId","baseTexture","_enabled","touched","j","tIndex","t","uvsUint32","roundPixels","resolution","_tintRGB","worldAlpha","CAN_UPLOAD_SAME_BUFFER","upload","vertices","group","groupTextureCount","bindTexture","state","setBlendMode","drawElements","TRIANGLES","bindShader","bind","stop","destroy","off","length","registerPlugin"],"mappings":"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","file":"SpriteRenderer.js","sourcesContent":["import ObjectRenderer from '../../renderers/webgl/utils/ObjectRenderer';\nimport WebGLRenderer from '../../renderers/webgl/WebGLRenderer';\nimport createIndicesForQuads from '../../utils/createIndicesForQuads';\nimport generateMultiTextureShader from './generateMultiTextureShader';\nimport checkMaxIfStatmentsInShader from '../../renderers/webgl/utils/checkMaxIfStatmentsInShader';\nimport Buffer from './BatchBuffer';\nimport settings from '../../settings';\nimport glCore from 'pixi-gl-core';\nimport bitTwiddle from 'bit-twiddle';\n\nlet TICK = 0;\nlet TEXTURE_TICK = 0;\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * @class\n * @private\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport default class SpriteRenderer extends ObjectRenderer\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this sprite batch works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * Number of values sent in the vertex buffer.\n         * aVertexPosition(2), aTextureCoord(1), aColor(1), aTextureId(1) = 5\n         *\n         * @member {number}\n         */\n        this.vertSize = 5;\n\n        /**\n         * The size of the vertex information in bytes.\n         *\n         * @member {number}\n         */\n        this.vertByteSize = this.vertSize * 4;\n\n        /**\n         * The number of images in the SpriteRenderer before it flushes.\n         *\n         * @member {number}\n         */\n        this.size = settings.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n\n        // the total number of bytes in our batch\n        // let numVerts = this.size * 4 * this.vertByteSize;\n\n        this.buffers = [];\n        for (let i = 1; i <= bitTwiddle.nextPow2(this.size); i *= 2)\n        {\n            this.buffers.push(new Buffer(i * 4 * this.vertByteSize));\n        }\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(this.size);\n\n        /**\n         * The default shaders that is used if a sprite doesn't have a more specific one.\n         * there is a shader for each number of textures that can be rendererd.\n         * These shaders will also be generated on the fly as required.\n         * @member {PIXI.Shader[]}\n         */\n        this.shader = null;\n\n        this.currentIndex = 0;\n        this.groups = [];\n\n        for (let k = 0; k < this.size; k++)\n        {\n            this.groups[k] = { textures: [], textureCount: 0, ids: [], size: 0, start: 0, blend: 0 };\n        }\n\n        this.sprites = [];\n\n        this.vertexBuffers = [];\n        this.vaos = [];\n\n        this.vaoMax = 2;\n        this.vertexCount = 0;\n\n        this.renderer.on('prerender', this.onPrerender, this);\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    onContextChange()\n    {\n        const gl = this.renderer.gl;\n\n        if (this.renderer.legacy)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            // step 1: first check max textures the GPU can handle.\n            this.MAX_TEXTURES = Math.min(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), settings.SPRITE_MAX_TEXTURES);\n\n            // step 2: check the maximum number of if statements the shader can have too..\n            this.MAX_TEXTURES = checkMaxIfStatmentsInShader(this.MAX_TEXTURES, gl);\n        }\n\n        const shader = this.shader = generateMultiTextureShader(gl, this.MAX_TEXTURES);\n\n        // create a couple of buffers\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        // we use the second shader as the first one depending on your browser may omit aTextureId\n        // as it is not used by the shader so is optimized out.\n\n        this.renderer.bindVao(null);\n\n        for (let i = 0; i < this.vaoMax; i++)\n        {\n            this.vertexBuffers[i] = glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\n\n            /* eslint-disable max-len */\n\n            // build the vao object that will render..\n            this.vaos[i] = this.renderer.createVao()\n                .addIndex(this.indexBuffer)\n                .addAttribute(this.vertexBuffers[i], shader.attributes.aVertexPosition, gl.FLOAT, false, this.vertByteSize, 0)\n                .addAttribute(this.vertexBuffers[i], shader.attributes.aTextureCoord, gl.UNSIGNED_SHORT, true, this.vertByteSize, 2 * 4)\n                .addAttribute(this.vertexBuffers[i], shader.attributes.aColor, gl.UNSIGNED_BYTE, true, this.vertByteSize, 3 * 4);\n\n            if (shader.attributes.aTextureId)\n            {\n                this.vaos[i].addAttribute(this.vertexBuffers[i], shader.attributes.aTextureId, gl.FLOAT, false, this.vertByteSize, 4 * 4);\n            }\n\n            /* eslint-enable max-len */\n        }\n\n        this.vao = this.vaos[0];\n        this.currentBlendMode = 99999;\n\n        this.boundTextures = new Array(this.MAX_TEXTURES);\n    }\n\n    /**\n     * Called before the renderer starts rendering.\n     *\n     */\n    onPrerender()\n    {\n        this.vertexCount = 0;\n    }\n\n    /**\n     * Renders the sprite object.\n     *\n     * @param {PIXI.Sprite} sprite - the sprite to render when using this spritebatch\n     */\n    render(sprite)\n    {\n        // TODO set blend modes..\n        // check texture..\n        if (this.currentIndex >= this.size)\n        {\n            this.flush();\n        }\n\n        // get the uvs for the texture\n\n        // if the uvs have not updated then no point rendering just yet!\n        if (!sprite._texture._uvs)\n        {\n            return;\n        }\n\n        // push a texture.\n        // increment the batchsize\n        this.sprites[this.currentIndex++] = sprite;\n    }\n\n    /**\n     * Renders the content and empties the current batch.\n     *\n     */\n    flush()\n    {\n        if (this.currentIndex === 0)\n        {\n            return;\n        }\n\n        const gl = this.renderer.gl;\n        const MAX_TEXTURES = this.MAX_TEXTURES;\n\n        const np2 = bitTwiddle.nextPow2(this.currentIndex);\n        const log2 = bitTwiddle.log2(np2);\n        const buffer = this.buffers[log2];\n\n        const sprites = this.sprites;\n        const groups = this.groups;\n\n        const float32View = buffer.float32View;\n        const uint32View = buffer.uint32View;\n\n        const boundTextures = this.boundTextures;\n        const rendererBoundTextures = this.renderer.boundTextures;\n        const touch = this.renderer.textureGC.count;\n\n        let index = 0;\n        let nextTexture;\n        let currentTexture;\n        let groupCount = 1;\n        let textureCount = 0;\n        let currentGroup = groups[0];\n        let vertexData;\n        let uvs;\n        let blendMode = sprites[0].blendMode;\n\n        currentGroup.textureCount = 0;\n        currentGroup.start = 0;\n        currentGroup.blend = blendMode;\n\n        TICK++;\n\n        let i;\n\n        // copy textures..\n        for (i = 0; i < MAX_TEXTURES; ++i)\n        {\n            boundTextures[i] = rendererBoundTextures[i];\n            boundTextures[i]._virtalBoundId = i;\n        }\n\n        for (i = 0; i < this.currentIndex; ++i)\n        {\n            // upload the sprite elemetns...\n            // they have all ready been calculated so we just need to push them into the buffer.\n            const sprite = sprites[i];\n\n            nextTexture = sprite._texture.baseTexture;\n\n            if (blendMode !== sprite.blendMode)\n            {\n                // finish a group..\n                blendMode = sprite.blendMode;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._enabled !== TICK)\n                {\n                    if (textureCount === MAX_TEXTURES)\n                    {\n                        TICK++;\n\n                        currentGroup.size = i - currentGroup.start;\n\n                        textureCount = 0;\n\n                        currentGroup = groups[groupCount++];\n                        currentGroup.blend = blendMode;\n                        currentGroup.textureCount = 0;\n                        currentGroup.start = i;\n                    }\n\n                    nextTexture.touched = touch;\n\n                    if (nextTexture._virtalBoundId === -1)\n                    {\n                        for (let j = 0; j < MAX_TEXTURES; ++j)\n                        {\n                            const tIndex = (j + TEXTURE_TICK) % MAX_TEXTURES;\n\n                            const t = boundTextures[tIndex];\n\n                            if (t._enabled !== TICK)\n                            {\n                                TEXTURE_TICK++;\n\n                                t._virtalBoundId = -1;\n\n                                nextTexture._virtalBoundId = tIndex;\n\n                                boundTextures[tIndex] = nextTexture;\n                                break;\n                            }\n                        }\n                    }\n\n                    nextTexture._enabled = TICK;\n\n                    currentGroup.textureCount++;\n                    currentGroup.ids[textureCount] = nextTexture._virtalBoundId;\n                    currentGroup.textures[textureCount++] = nextTexture;\n                }\n            }\n\n            vertexData = sprite.vertexData;\n\n            // TODO this sum does not need to be set each frame..\n            uvs = sprite._texture._uvs.uvsUint32;\n\n            if (this.renderer.roundPixels)\n            {\n                const resolution = this.renderer.resolution;\n\n                // xy\n                float32View[index] = ((vertexData[0] * resolution) | 0) / resolution;\n                float32View[index + 1] = ((vertexData[1] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 5] = ((vertexData[2] * resolution) | 0) / resolution;\n                float32View[index + 6] = ((vertexData[3] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 10] = ((vertexData[4] * resolution) | 0) / resolution;\n                float32View[index + 11] = ((vertexData[5] * resolution) | 0) / resolution;\n\n                // xy\n                float32View[index + 15] = ((vertexData[6] * resolution) | 0) / resolution;\n                float32View[index + 16] = ((vertexData[7] * resolution) | 0) / resolution;\n            }\n            else\n            {\n                // xy\n                float32View[index] = vertexData[0];\n                float32View[index + 1] = vertexData[1];\n\n                // xy\n                float32View[index + 5] = vertexData[2];\n                float32View[index + 6] = vertexData[3];\n\n                // xy\n                float32View[index + 10] = vertexData[4];\n                float32View[index + 11] = vertexData[5];\n\n                // xy\n                float32View[index + 15] = vertexData[6];\n                float32View[index + 16] = vertexData[7];\n            }\n\n            uint32View[index + 2] = uvs[0];\n            uint32View[index + 7] = uvs[1];\n            uint32View[index + 12] = uvs[2];\n            uint32View[index + 17] = uvs[3];\n\n            /* eslint-disable max-len */\n            uint32View[index + 3] = uint32View[index + 8] = uint32View[index + 13] = uint32View[index + 18] = sprite._tintRGB + (Math.min(sprite.worldAlpha, 1) * 255 << 24);\n\n            float32View[index + 4] = float32View[index + 9] = float32View[index + 14] = float32View[index + 19] = nextTexture._virtalBoundId;\n            /* eslint-enable max-len */\n\n            index += 20;\n        }\n\n        currentGroup.size = i - currentGroup.start;\n\n        if (!settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // this is still needed for IOS performance..\n            // it really does not like uploading to the same buffer in a single frame!\n            if (this.vaoMax <= this.vertexCount)\n            {\n                this.vaoMax++;\n                this.vertexBuffers[this.vertexCount] = glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\n\n                /* eslint-disable max-len */\n\n                // build the vao object that will render..\n                this.vaos[this.vertexCount] = this.renderer.createVao()\n                    .addIndex(this.indexBuffer)\n                    .addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aVertexPosition, gl.FLOAT, false, this.vertByteSize, 0)\n                    .addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aTextureCoord, gl.UNSIGNED_SHORT, true, this.vertByteSize, 2 * 4)\n                    .addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aColor, gl.UNSIGNED_BYTE, true, this.vertByteSize, 3 * 4);\n\n                if (this.shader.attributes.aTextureId)\n                {\n                    this.vaos[this.vertexCount].addAttribute(this.vertexBuffers[this.vertexCount], this.shader.attributes.aTextureId, gl.FLOAT, false, this.vertByteSize, 4 * 4);\n                }\n\n                /* eslint-enable max-len */\n            }\n\n            this.renderer.bindVao(this.vaos[this.vertexCount]);\n\n            this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, false);\n\n            this.vertexCount++;\n        }\n        else\n        {\n            // lets use the faster option, always use buffer number 0\n            this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, true);\n        }\n\n        for (i = 0; i < MAX_TEXTURES; ++i)\n        {\n            rendererBoundTextures[i]._virtalBoundId = -1;\n        }\n\n        // render the groups..\n        for (i = 0; i < groupCount; ++i)\n        {\n            const group = groups[i];\n            const groupTextureCount = group.textureCount;\n\n            for (let j = 0; j < groupTextureCount; j++)\n            {\n                currentTexture = group.textures[j];\n\n                // reset virtual ids..\n                // lets do a quick check..\n                if (rendererBoundTextures[group.ids[j]] !== currentTexture)\n                {\n                    this.renderer.bindTexture(currentTexture, group.ids[j], true);\n                }\n\n                // reset the virtualId..\n                currentTexture._virtalBoundId = -1;\n            }\n\n            // set the blend mode..\n            this.renderer.state.setBlendMode(group.blend);\n\n            gl.drawElements(gl.TRIANGLES, group.size * 6, gl.UNSIGNED_SHORT, group.start * 6 * 2);\n        }\n\n        // reset elements for the next flush\n        this.currentIndex = 0;\n    }\n\n    /**\n     * Starts a new sprite batch.\n     */\n    start()\n    {\n        this.renderer.bindShader(this.shader);\n\n        if (settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // bind buffer #0, we don't need others\n            this.renderer.bindVao(this.vaos[this.vertexCount]);\n\n            this.vertexBuffers[this.vertexCount].bind();\n        }\n    }\n\n    /**\n     * Stops and flushes the current batch.\n     *\n     */\n    stop()\n    {\n        this.flush();\n    }\n\n    /**\n     * Destroys the SpriteRenderer.\n     *\n     */\n    destroy()\n    {\n        for (let i = 0; i < this.vaoMax; i++)\n        {\n            if (this.vertexBuffers[i])\n            {\n                this.vertexBuffers[i].destroy();\n            }\n            if (this.vaos[i])\n            {\n                this.vaos[i].destroy();\n            }\n        }\n\n        if (this.indexBuffer)\n        {\n            this.indexBuffer.destroy();\n        }\n\n        this.renderer.off('prerender', this.onPrerender, this);\n\n        super.destroy();\n\n        if (this.shader)\n        {\n            this.shader.destroy();\n            this.shader = null;\n        }\n\n        this.vertexBuffers = null;\n        this.vaos = null;\n        this.indexBuffer = null;\n        this.indices = null;\n\n        this.sprites = null;\n\n        for (let i = 0; i < this.buffers.length; ++i)\n        {\n            this.buffers[i].destroy();\n        }\n    }\n}\n\nWebGLRenderer.registerPlugin('sprite', SpriteRenderer);\n"]}